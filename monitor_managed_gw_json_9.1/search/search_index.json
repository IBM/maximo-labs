{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Maximo Monitor 9.1 Adding custom Json-over-http device to the device library Info This Maximo Monitor lab demonstrates the use of a custom device from the Device library. In this lab you will learn the steps needed to successfully use an Json simulator and get data into Maximo Monitor using a Managed Gateway. The exercises will cover: Setting up the Json simulator Adding a new device to the device library by import device settings Filling in CSV template for Json-over-http Protocol datapoints Create a Managed Gateway and add the custom device Verify data flow from the added custom device in Maximo Monitor. Note Expected time needed to run the complete lab: 1 hour Updated: 2025-07-16","title":"Welcome"},{"location":"#welcome-to-the-maximo-monitor-91adding-custom-json-over-http-device-to-the-device-library","text":"Info This Maximo Monitor lab demonstrates the use of a custom device from the Device library. In this lab you will learn the steps needed to successfully use an Json simulator and get data into Maximo Monitor using a Managed Gateway. The exercises will cover: Setting up the Json simulator Adding a new device to the device library by import device settings Filling in CSV template for Json-over-http Protocol datapoints Create a Managed Gateway and add the custom device Verify data flow from the added custom device in Maximo Monitor. Note Expected time needed to run the complete lab: 1 hour Updated: 2025-07-16","title":"Welcome to the Maximo Monitor 9.1Adding custom Json-over-http device to the device library"},{"location":"add_device_1/","text":"Objectives In this Exercise you will learn how to add a Json-over-http device to the Device library. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises New in MAS 9.1 You can add custom devices, such as PLCs or OPC-UA servers, or industrial devices which supports Modbus, BACnet and Json protocols that are not available in the Maximo Monitor Device library. Later the same device can be used by anyone who is creating a device on the Devices page. 1. Adding device for GET method Since Json-over-http are very customizable you will need to add a new device to the Device library instead of using a pre-configured device in the Device library by uploading the CSV file in given format. Navigate to the Device library page: Modbus devices can be added using device settings in CSV file format . Click Add device to library and select Import device settings option: Select protocol as JSON Over HTTP Enter the device details and click Next : Tip New manufacutrer can be added if you couldn't find it in the option. XX in the Device name should be your initials in case other people are following this lab in the same Maximo Application Suite environment. Download example.xlsx file Open Excel file to fill the data points in metrics sheet, Each column in the template, offering context on its purpose and instructions for completing the corresponding cell values. It is important to note that each row in the CSV represents a single json-over-http datapoint. Examples of input for csv template Column_Name\u2003\u2003\u2003\u2003\u2003 Description\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Payload RSpecifies the JSON body required for POST API calls to retrieve the desired datapoint. This payload consists of key-value pairs representing standard JSON data types (objects, arrays, strings, numbers, booleans, null). This field is applicable only when the HTTP method is set to POST. Name The name of the data point should be added in this column. The value will be used in Monitor as the related metric name. Actual Torque Type Indicates the data type of the datapoint, enabling the EDC tool to correctly interpret incoming values. Supported types include: float , string and bool . float: Numeric values with decimal points (e.g., voltage readings: 254.5698). string: Alphanumeric values (e.g., model name, firmware version: \u201cV52.1.4\u201d). bool: Coil addresses represent Boolean values, storing simple binary data (0 or 1). Unit This column indicates the unit in which the data is reported for a specific datapoint. This is an optional parameter as not all datapoints require a unit. Method Specifies the HTTP method used to interact with the API. GET and POST are the only acceptable values. GET Retrieves records from the server. POST Sends data to create a new record on the server. Endpoint Refers to the API URL that acts as the access point for retrieving or sending data. This is appended to the base URL to define the target resource. e.g: /device-1 Response_Path Specifies the path used to extract the required value from the API response payload. Use a JMESPath expression to navigate the JSON structure. For more information on syntax and examples., please refer to Jmespath.org Copy the json payload from the browser The response path expression for the Json-over-http datapoint can be evaluated in JMESPath Paste the payload in JSON data and Enter an expression in the search box to see JMESPath in action and see the result in result pane Fill the Metrics sheet using the details: For filling the metrics sheet, you can refer Sample Metrics Format sheet. Note Once the required datapoint details is filled to the Metrics sheet, kindly save the Metrics sheet to CSV format for uploading. Upload the CSV file and select Next You can see the summary of datapoints, if required you can remove the metrics here. Once done click Finish : Attention If you see a Bad Request error while Uploading the CSV file, then you might need to check the CSV file for each metrics which you might be missing details or it maybe in a invalid format. You can see the newly added device in Device library: Note If new Manufacturer is created, it will be appended along with the OrganizationID. IBM - Main e.g - If the the OrganizationID is MASPROD then the manfucturer will be XXXXX - MASPROD Now the device is ready to use. Enjoy!!! \ud83e\udd17. 2. Adding device for POST method Open Excel file to fill the data points in metrics sheet, Each column in the template, offering context on its purpose and instructions for completing the corresponding cell values. It is important to note that each row in the CSV represents a single json-over-http datapoint. To get the response payload use the curl command curl -X POST -d \"['Temperature','Voltage L1-L2','Device-Name','Working','Active Alarms']\" http://localhost:8080/device-3 The response path expression for the Json-over-http datapoint can be evaluated in JMESPath Copy the respose from the terminal or command window Paste the payload in JSON data and Enter an expression in the search box to see JMESPath in action and see the result in result pane. Fill the Metrics sheet using the details: Save the Metrics Excel file to CSV and create new device in the Device library, by following the previous step. Now the device is ready to use for Managed Gateway. Enjoy!!! \ud83e\udd17 Congratulations you have successfully added a device to the Device library.","title":"2. Add device to Device library"},{"location":"add_device_1/#objectives","text":"In this Exercise you will learn how to add a Json-over-http device to the Device library. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises New in MAS 9.1 You can add custom devices, such as PLCs or OPC-UA servers, or industrial devices which supports Modbus, BACnet and Json protocols that are not available in the Maximo Monitor Device library. Later the same device can be used by anyone who is creating a device on the Devices page.","title":"Objectives"},{"location":"add_device_1/#1-adding-device-for-get-method","text":"Since Json-over-http are very customizable you will need to add a new device to the Device library instead of using a pre-configured device in the Device library by uploading the CSV file in given format. Navigate to the Device library page: Modbus devices can be added using device settings in CSV file format . Click Add device to library and select Import device settings option: Select protocol as JSON Over HTTP Enter the device details and click Next : Tip New manufacutrer can be added if you couldn't find it in the option. XX in the Device name should be your initials in case other people are following this lab in the same Maximo Application Suite environment. Download example.xlsx file Open Excel file to fill the data points in metrics sheet, Each column in the template, offering context on its purpose and instructions for completing the corresponding cell values. It is important to note that each row in the CSV represents a single json-over-http datapoint.","title":"1. Adding device for GET method"},{"location":"add_device_1/#examples-of-input-for-csv-template","text":"Column_Name\u2003\u2003\u2003\u2003\u2003 Description\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Payload RSpecifies the JSON body required for POST API calls to retrieve the desired datapoint. This payload consists of key-value pairs representing standard JSON data types (objects, arrays, strings, numbers, booleans, null). This field is applicable only when the HTTP method is set to POST. Name The name of the data point should be added in this column. The value will be used in Monitor as the related metric name. Actual Torque Type Indicates the data type of the datapoint, enabling the EDC tool to correctly interpret incoming values. Supported types include: float , string and bool . float: Numeric values with decimal points (e.g., voltage readings: 254.5698). string: Alphanumeric values (e.g., model name, firmware version: \u201cV52.1.4\u201d). bool: Coil addresses represent Boolean values, storing simple binary data (0 or 1). Unit This column indicates the unit in which the data is reported for a specific datapoint. This is an optional parameter as not all datapoints require a unit. Method Specifies the HTTP method used to interact with the API. GET and POST are the only acceptable values. GET Retrieves records from the server. POST Sends data to create a new record on the server. Endpoint Refers to the API URL that acts as the access point for retrieving or sending data. This is appended to the base URL to define the target resource. e.g: /device-1 Response_Path Specifies the path used to extract the required value from the API response payload. Use a JMESPath expression to navigate the JSON structure. For more information on syntax and examples., please refer to Jmespath.org Copy the json payload from the browser The response path expression for the Json-over-http datapoint can be evaluated in JMESPath Paste the payload in JSON data and Enter an expression in the search box to see JMESPath in action and see the result in result pane Fill the Metrics sheet using the details: For filling the metrics sheet, you can refer Sample Metrics Format sheet. Note Once the required datapoint details is filled to the Metrics sheet, kindly save the Metrics sheet to CSV format for uploading. Upload the CSV file and select Next You can see the summary of datapoints, if required you can remove the metrics here. Once done click Finish : Attention If you see a Bad Request error while Uploading the CSV file, then you might need to check the CSV file for each metrics which you might be missing details or it maybe in a invalid format. You can see the newly added device in Device library: Note If new Manufacturer is created, it will be appended along with the OrganizationID. IBM - Main e.g - If the the OrganizationID is MASPROD then the manfucturer will be XXXXX - MASPROD Now the device is ready to use. Enjoy!!! \ud83e\udd17.","title":"Examples of input for csv template"},{"location":"add_device_1/#2-adding-device-for-post-method","text":"Open Excel file to fill the data points in metrics sheet, Each column in the template, offering context on its purpose and instructions for completing the corresponding cell values. It is important to note that each row in the CSV represents a single json-over-http datapoint. To get the response payload use the curl command curl -X POST -d \"['Temperature','Voltage L1-L2','Device-Name','Working','Active Alarms']\" http://localhost:8080/device-3 The response path expression for the Json-over-http datapoint can be evaluated in JMESPath Copy the respose from the terminal or command window Paste the payload in JSON data and Enter an expression in the search box to see JMESPath in action and see the result in result pane. Fill the Metrics sheet using the details: Save the Metrics Excel file to CSV and create new device in the Device library, by following the previous step. Now the device is ready to use for Managed Gateway. Enjoy!!! \ud83e\udd17 Congratulations you have successfully added a device to the Device library.","title":"2. Adding device for POST method"},{"location":"add_device_2/","text":"Objectives In this Exercise you will learn how to add a second simulator device to the Managed Gateway. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises Filter to find and select your Gateway - select it and you should also see devices handled by your Managed Gateway: In the Managed Gateway click on Add device : The Use device library will automatically be selected, as a Managed Gateway only supports devices from the library. Simply click on Continue : Note The type of gateway defines which types of devices that can be added to the gateway. This is automatically handled by Monitor. Managed Gateway: OT devices from the device library. Standard/Privileged Gateway: IoT devices are added as custom devices. It is time to add the Json simulator-3 device. Search for IBM in the manufacurer drop-down and select it. Click Next : Select the HTTP Device - main product, choose Simulator-3 and click on Next : Select the http protocol for endpoint: Tip The simulator is running in our local machine at http://localhost:8080 or http://127.0.0.1:8080 . Now it is time to use the IP address of the simulator and port number 127.0.0.1 , 8080 . Click on Next ; Tip Context path of the URL should be added to the datapoints in the endpoint column during CSV upload. Define the Device ID as Json-over-http_Simulator-3 . You can see the Product Type as Custom Device, i.e. The product type of all the custom device added to the device library. Click on the Device type and you should see this: You can either select the old device type or create new Device Type: Click on the XX_Json_Type and click Next : Tip You can select your own Device Type from the drop-down list once you have created it. Define the Data frequency to 30000 (30 seconds) and it will automatically be used when you select the metrics: Select all the Metrics. Click Save : You will now see your 2nd device being a part of your Managed Gateway: Congratulations you have successfully added another simulator device to your Managed Gateway.","title":"5. Add Simulator-3 device"},{"location":"add_device_2/#objectives","text":"In this Exercise you will learn how to add a second simulator device to the Managed Gateway. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises Filter to find and select your Gateway - select it and you should also see devices handled by your Managed Gateway: In the Managed Gateway click on Add device : The Use device library will automatically be selected, as a Managed Gateway only supports devices from the library. Simply click on Continue : Note The type of gateway defines which types of devices that can be added to the gateway. This is automatically handled by Monitor. Managed Gateway: OT devices from the device library. Standard/Privileged Gateway: IoT devices are added as custom devices. It is time to add the Json simulator-3 device. Search for IBM in the manufacurer drop-down and select it. Click Next : Select the HTTP Device - main product, choose Simulator-3 and click on Next : Select the http protocol for endpoint: Tip The simulator is running in our local machine at http://localhost:8080 or http://127.0.0.1:8080 . Now it is time to use the IP address of the simulator and port number 127.0.0.1 , 8080 . Click on Next ; Tip Context path of the URL should be added to the datapoints in the endpoint column during CSV upload. Define the Device ID as Json-over-http_Simulator-3 . You can see the Product Type as Custom Device, i.e. The product type of all the custom device added to the device library. Click on the Device type and you should see this: You can either select the old device type or create new Device Type: Click on the XX_Json_Type and click Next : Tip You can select your own Device Type from the drop-down list once you have created it. Define the Data frequency to 30000 (30 seconds) and it will automatically be used when you select the metrics: Select all the Metrics. Click Save : You will now see your 2nd device being a part of your Managed Gateway: Congratulations you have successfully added another simulator device to your Managed Gateway.","title":"Objectives"},{"location":"create_gateway/","text":"Objectives In this Exercise you will learn how to create the Managed Gateway in Monitor and add the new device you've added to the Device library. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises Add a Managed Gateway Login to MAS: Expand Setup under the Monitor section in the left menu and select Gateways: New in MAS 9.1 Monitor no longer have a main home page. All interaction with Monitor is initiated from the Monitor section in the left menu Select Add gateway : Define the gateway ID XX_MGD_GW_01 and the gateway Type XX_MGD_GW_01 . Tip XX in the gateway ID and Type should be your initials in case other people are following this lab in the same Maximo Application Suite environment. Make sure the gateway Configuration is Managed and click Save : You will now see your new Managed Gateway, including a Managed tag in both the list of Gateways as well as in the gateway definition: Note Credentials are automatically \"baked into\" the docker image for the Managed Gateway. This means that the credentials will not be presented to you, as with the other gateway configuration types. Add your new device to the Managed Gateway In the Managed Gateway click on Add device : The Use device library will automatically be selected, as a Managed Gateway only supports devices from the library. Simply click on Continue : Note The type of gateway defines which types of devices that can be added to the gateway. This is automatically handled by Monitor. Managed Gateway: OT devices from the device library. Standard/Privileged Gateway: IoT devices are added as custom devices. It is time to add the Json simulator device. Search for IBM in the manufacurer drop-down and select it. Click Next : Select the HTTP Device - main product, choose Simulator-1 and click on Next : Select the http protocol for endpoint: Tip The simulator is running in our local machine at http://localhost:8080 or http://127.0.0.1:8080 . Now it is time to use the IP address of the simulator and port number 127.0.0.1 , 8080 . Click on Next ; Tip Context path of the URL should be added to the datapoints in the endpoint column during CSV upload. Define the Device ID as Json-over-http_Simulator-1 . You can see the Product Type as Custom Device, i.e. The product type of all the custom device added to the device library. Click on the Device type and you should see this: You will create your own Device Type. Since you have not yet done so, you just type XX_Json_Type where you replace XX with your initials: Click on the new device type to create it and click Next : Tip You can select your own Device Type from the drop-down list once you have created it. Define the Data frequency to 30000 (30 seconds) and it will automatically be used when you select the metrics: Select all the Metrics. Click Save : You will now see your new added device being a part of your new Managed Gateway: Congratulations you have successfully created the Managed Gateway in Monitor and added an instance of the newly added device in the Device library.","title":"3. Create a Managed Gateway"},{"location":"create_gateway/#objectives","text":"In this Exercise you will learn how to create the Managed Gateway in Monitor and add the new device you've added to the Device library. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the previous exercises","title":"Objectives"},{"location":"create_gateway/#add-a-managed-gateway","text":"Login to MAS: Expand Setup under the Monitor section in the left menu and select Gateways: New in MAS 9.1 Monitor no longer have a main home page. All interaction with Monitor is initiated from the Monitor section in the left menu Select Add gateway : Define the gateway ID XX_MGD_GW_01 and the gateway Type XX_MGD_GW_01 . Tip XX in the gateway ID and Type should be your initials in case other people are following this lab in the same Maximo Application Suite environment. Make sure the gateway Configuration is Managed and click Save : You will now see your new Managed Gateway, including a Managed tag in both the list of Gateways as well as in the gateway definition: Note Credentials are automatically \"baked into\" the docker image for the Managed Gateway. This means that the credentials will not be presented to you, as with the other gateway configuration types.","title":"Add a Managed Gateway"},{"location":"create_gateway/#add-your-new-device-to-the-managed-gateway","text":"In the Managed Gateway click on Add device : The Use device library will automatically be selected, as a Managed Gateway only supports devices from the library. Simply click on Continue : Note The type of gateway defines which types of devices that can be added to the gateway. This is automatically handled by Monitor. Managed Gateway: OT devices from the device library. Standard/Privileged Gateway: IoT devices are added as custom devices. It is time to add the Json simulator device. Search for IBM in the manufacurer drop-down and select it. Click Next : Select the HTTP Device - main product, choose Simulator-1 and click on Next : Select the http protocol for endpoint: Tip The simulator is running in our local machine at http://localhost:8080 or http://127.0.0.1:8080 . Now it is time to use the IP address of the simulator and port number 127.0.0.1 , 8080 . Click on Next ; Tip Context path of the URL should be added to the datapoints in the endpoint column during CSV upload. Define the Device ID as Json-over-http_Simulator-1 . You can see the Product Type as Custom Device, i.e. The product type of all the custom device added to the device library. Click on the Device type and you should see this: You will create your own Device Type. Since you have not yet done so, you just type XX_Json_Type where you replace XX with your initials: Click on the new device type to create it and click Next : Tip You can select your own Device Type from the drop-down list once you have created it. Define the Data frequency to 30000 (30 seconds) and it will automatically be used when you select the metrics: Select all the Metrics. Click Save : You will now see your new added device being a part of your new Managed Gateway: Congratulations you have successfully created the Managed Gateway in Monitor and added an instance of the newly added device in the Device library.","title":"Add your new device to the Managed Gateway"},{"location":"deploy/","text":"Objectives In this Exercise you will learn how to: Deploy the Managed Gateway Verify connectivity and data inflow Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs and for this exercise completed the previous exercises verified the simulator is running as described in exercise 1 Deploy the Managed Gateway While looking at your Managed Gateway in the Gateways list, press the View deployment instructions . Click on the docker command to copy it to the clipboard: Open a terminal window (Mac/Linux) or Command window (Windows) where you want to run the Managed Gateway and then paste the docker command line from the clipboard. Click enter to execute it, and you should see something similar to the following: Tips You can see that the Managed Gateway have succesfully established a connection to the Json Simulator. Secondly you can also see the MQTT connection is established between the Managed Gateway and Maximo Monitor The first time you deploy you might get a response like: Unable to find image 'icr.io/cpopen/ibm-mas/edgedatacollector:2.5.7' locally Please be patient while the Edge Data Collactor docker container is bering downloaded and started. If any changes made in the gateway/devices. We need to Re-deploy the docker command. Before re-deploying please stop the old docker container using docker stop <Container ID> To get the container ID use docker ps , It will give the list of docker containers running. Verify the Json-over-http device data is flowing into Monitor Click to open the Json-over-http_Simulator-1 device: Navigate to Recent event and wait for half a minute (you know those 30000ms defined when adding the device) until the first message is coming through. Click on View payload and see the data points being send to the Event name status : These are the data points that you selected when adding the device to the Managed Gateway: { \"timestamp\": \"2025-07-15T13:09:29.243654Z\", \"device-1-current-l1\": 7, \"device-1-current-l2\": 8, \"device-1-current-l3\": 8, \"device-1-device-name\": \"Json-over-http Simulator 1\", \"device-1-temperature\": 21.153, \"device-1-voltage-l1-l2\": 227.97, \"device-1-working-status\": true } Potentially the stored data could be used in a dashboard for the Siemens S7 device: Congratulations you have successfully deployed and verified the connectivity and data inflow.","title":"4. Deploy and verify data inflow"},{"location":"deploy/#objectives","text":"In this Exercise you will learn how to: Deploy the Managed Gateway Verify connectivity and data inflow Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs and for this exercise completed the previous exercises verified the simulator is running as described in exercise 1","title":"Objectives"},{"location":"deploy/#deploy-the-managed-gateway","text":"While looking at your Managed Gateway in the Gateways list, press the View deployment instructions . Click on the docker command to copy it to the clipboard: Open a terminal window (Mac/Linux) or Command window (Windows) where you want to run the Managed Gateway and then paste the docker command line from the clipboard. Click enter to execute it, and you should see something similar to the following: Tips You can see that the Managed Gateway have succesfully established a connection to the Json Simulator. Secondly you can also see the MQTT connection is established between the Managed Gateway and Maximo Monitor The first time you deploy you might get a response like: Unable to find image 'icr.io/cpopen/ibm-mas/edgedatacollector:2.5.7' locally Please be patient while the Edge Data Collactor docker container is bering downloaded and started. If any changes made in the gateway/devices. We need to Re-deploy the docker command. Before re-deploying please stop the old docker container using docker stop <Container ID> To get the container ID use docker ps , It will give the list of docker containers running.","title":"Deploy the Managed Gateway"},{"location":"deploy/#verify-the-json-over-http-device-data-is-flowing-into-monitor","text":"Click to open the Json-over-http_Simulator-1 device: Navigate to Recent event and wait for half a minute (you know those 30000ms defined when adding the device) until the first message is coming through. Click on View payload and see the data points being send to the Event name status : These are the data points that you selected when adding the device to the Managed Gateway: { \"timestamp\": \"2025-07-15T13:09:29.243654Z\", \"device-1-current-l1\": 7, \"device-1-current-l2\": 8, \"device-1-current-l3\": 8, \"device-1-device-name\": \"Json-over-http Simulator 1\", \"device-1-temperature\": 21.153, \"device-1-voltage-l1-l2\": 227.97, \"device-1-working-status\": true } Potentially the stored data could be used in a dashboard for the Siemens S7 device: Congratulations you have successfully deployed and verified the connectivity and data inflow.","title":"Verify the Json-over-http device data is flowing into Monitor"},{"location":"prereqs/","text":"Pre-Requisite Instructions Here are the pre-requisites for this Maximo hands-on lab. Attention This lab requires Maximo Monitor 9.1 or later. MAS application entitlement must be Limited or higher. All Exercises All Exercises require that you have: A computer with a Chrome or Firefox browser and internet connectivity. User access to a Maximo Application Suite environment that can create a managed gateways in Monitor. This require: o Your user must have access to Monitor o Your user must have administrator access to Maximo Application Suite. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment. Exercise 1 and 4 Docker must be running on your local machine while acting as the Managed Gateway instance. There are different ways to install the Docker engine depending of the package and the OS. One multi platform option is Rancher Desktop. It is fairly easy to install Rancher Desktop, as you just have to follow this guide: Running Docker locally Tip Podman and Docker Desktop should also work the same way.","title":"Pre-Requisites"},{"location":"prereqs/#pre-requisite-instructions","text":"Here are the pre-requisites for this Maximo hands-on lab. Attention This lab requires Maximo Monitor 9.1 or later. MAS application entitlement must be Limited or higher.","title":"Pre-Requisite Instructions"},{"location":"prereqs/#all-exercises","text":"All Exercises require that you have: A computer with a Chrome or Firefox browser and internet connectivity. User access to a Maximo Application Suite environment that can create a managed gateways in Monitor. This require: o Your user must have access to Monitor o Your user must have administrator access to Maximo Application Suite. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment.","title":"All Exercises"},{"location":"prereqs/#exercise-1-and-4","text":"Docker must be running on your local machine while acting as the Managed Gateway instance. There are different ways to install the Docker engine depending of the package and the OS. One multi platform option is Rancher Desktop. It is fairly easy to install Rancher Desktop, as you just have to follow this guide: Running Docker locally Tip Podman and Docker Desktop should also work the same way.","title":"Exercise 1 and 4"},{"location":"re-deploy/","text":"Objectives In this Exercise you will learn how to: Stop and re-deploy the Managed Gateway View the incoming data in Monitor dashboards Before you begin: This Exercise requires that you have: completed the pre-requisites required for All Exercises and for Exercise 4 completed the previous exercises verified the simulator is running as described in exercise 1 Re-Deploy the Managed Gateway Go to new Terminal or Command window, Use the docker ps command to view the running docker containers. Locate the CONTAINER ID of the running Managed Gateway container (look for edgedatacollector ) - here it is bc5f4f95c71e . Use the docker stop <CONTAINER ID> command to stop the docker container. Navigate back to your Managed Gateway in Monitor and press the View deployment instructions . Click on the docker command to copy it to the clipboard: Get back to the terminal and then paste the docker command line from the clipboard. Click enter to execute it, and you should see something similar to the following: View data in Device data table Click to open the Json-over-http_Simulator-3 device: Navigate to Recent event and wait for half a minute (you know those 30000ms defined when adding the device) until the first message is coming through. Click on View payload and see the data points being send to the Event name status : Potentially the stored data could be used in a dashboard for the Siemens S7 device: Congratulations you have successfully re-deployed and viewed data from both Simulators in a Monitor dashboard. This concludes this lab.","title":"6. Deploy and view data in a dashboard"},{"location":"re-deploy/#objectives","text":"In this Exercise you will learn how to: Stop and re-deploy the Managed Gateway View the incoming data in Monitor dashboards Before you begin: This Exercise requires that you have: completed the pre-requisites required for All Exercises and for Exercise 4 completed the previous exercises verified the simulator is running as described in exercise 1","title":"Objectives"},{"location":"re-deploy/#re-deploy-the-managed-gateway","text":"Go to new Terminal or Command window, Use the docker ps command to view the running docker containers. Locate the CONTAINER ID of the running Managed Gateway container (look for edgedatacollector ) - here it is bc5f4f95c71e . Use the docker stop <CONTAINER ID> command to stop the docker container. Navigate back to your Managed Gateway in Monitor and press the View deployment instructions . Click on the docker command to copy it to the clipboard: Get back to the terminal and then paste the docker command line from the clipboard. Click enter to execute it, and you should see something similar to the following:","title":"Re-Deploy the Managed Gateway"},{"location":"re-deploy/#view-data-in-device-data-table","text":"Click to open the Json-over-http_Simulator-3 device: Navigate to Recent event and wait for half a minute (you know those 30000ms defined when adding the device) until the first message is coming through. Click on View payload and see the data points being send to the Event name status : Potentially the stored data could be used in a dashboard for the Siemens S7 device: Congratulations you have successfully re-deployed and viewed data from both Simulators in a Monitor dashboard. This concludes this lab.","title":"View data in Device data table"},{"location":"release_notes/","text":"Contributors to this Maximo Lab Author & Developer: Saravanan Krishnamoorthy - saravanan.krish@ibm.com Dockerization Assistance for Json-simulator: Gregorio Guerretta (Building docker image) - Gregorio.Guerretta@ibm.com Change Information Date By Description 2025-07-16 Saravanan Krishnamoorthy Lab is ready for the first release","title":"Release Notes"},{"location":"release_notes/#contributors-to-this-maximo-lab","text":"","title":"Contributors to this Maximo Lab"},{"location":"release_notes/#author-developer","text":"Saravanan Krishnamoorthy - saravanan.krish@ibm.com","title":"Author &amp; Developer:"},{"location":"release_notes/#dockerization-assistance-for-json-simulator","text":"Gregorio Guerretta (Building docker image) - Gregorio.Guerretta@ibm.com","title":"Dockerization Assistance for Json-simulator:"},{"location":"release_notes/#change-information","text":"Date By Description 2025-07-16 Saravanan Krishnamoorthy Lab is ready for the first release","title":"Change Information"},{"location":"setup_simulator/","text":"Objectives In this Exercise you will learn how to use Docker to run a fixed and ready docker container with the json simulator. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs Note The created docker container should work on the following architectures: - x86 (Windows/Linux/macOS) - ARM (Linux/macOS). 1. Install Docker There are different ways to install the Docker engine depending of the package and the OS. One multi platform option is Rancher Desktop. It is fairly easy to install Rancher Desktop, as you just have to follow this guide: Running Docker locally 2. Create the Docker container Open a terminal or command window and run the following command: docker create -p 8080:8000 --name json-simulator ghcr.io/guerrettag/json-over-http-simulator Please be patient even though you'll see the following message: Unable to find image 'ghcr.io/guerrettag/json-over-http-simulator:latest' locally It needs to pull the docker image. It has been given the name: josn-simulator 3. Start the Docker container Run the follwing command to start the container: docker start json-simulator The simulator is now active and the random and dynamic values will change every 30 second. It will run in the background and not produce any output in the terminal/command window. 4. Stop and remove the Docker container Once you are done using the docker based simulator you can stop it with the following command: docker stop json-simulator and remove the container with the following command: docker rm json-simulator All Docker commands in one window Tip The dynamic and random values will change for every GET or POST Request. The Simulator The json-simulator is simulating 2 device payload for GET method and 1 device for POST method delivering the following data points: Payload for GET method Device - 1 : { \"Voltage L1-L2\": 221.868, \"Device-Name\": \"Json-over-http Simulator 1\", \"Working\": true, \"Temperature\": 18.67, \"Currents\": { \"L1\": 3, \"L2\": 5, \"L3\": 8 }, \"Active Alarms\": [] } Device - 2: { \"Voltage L1-L2\": 414.613, \"Device-Name\": \"Json-over-http Simulator 2\", \"Working\": false, \"Temperature\": 17.217, \"Active Alarms\": [ \"Overvoltage\", \"Device not running\" ] } Payload for POST method Device - 3: To get the response from the device use below command in terminal or command window curl -X POST -d \"['Temperature','Voltage L1-L2','Device-Name','Working','Active Alarms']\" http://localhost:8080/device-3 The Response should be as seen below, {\"Temperature\": 22.088, \"Voltage L1-L2\": 419.303, \"Device-Name\": \"Json-over-http Simulator 3 (POST)\", \"Working\": false, \"Active Alarms\": [\"Overvoltage\", \"Device not running\"]} Note All three devices are using port 8080. So you need to use the localhost IP Address along with the port number and enpoint details. GET - 127.0.0.1:8080/device-1 GET - 127.0.0.1:8080/device-2 POST - Use the above curl command to get the values. Congratulations you have successfully setup a json simulator environment using a preconfigured docker container.","title":"1. Setup Simulator Environment"},{"location":"setup_simulator/#objectives","text":"In this Exercise you will learn how to use Docker to run a fixed and ready docker container with the json simulator. Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs Note The created docker container should work on the following architectures: - x86 (Windows/Linux/macOS) - ARM (Linux/macOS).","title":"Objectives"},{"location":"setup_simulator/#1-install-docker","text":"There are different ways to install the Docker engine depending of the package and the OS. One multi platform option is Rancher Desktop. It is fairly easy to install Rancher Desktop, as you just have to follow this guide: Running Docker locally","title":"1. Install Docker"},{"location":"setup_simulator/#2-create-the-docker-container","text":"Open a terminal or command window and run the following command: docker create -p 8080:8000 --name json-simulator ghcr.io/guerrettag/json-over-http-simulator Please be patient even though you'll see the following message: Unable to find image 'ghcr.io/guerrettag/json-over-http-simulator:latest' locally It needs to pull the docker image. It has been given the name: josn-simulator","title":"2. Create the Docker container"},{"location":"setup_simulator/#3-start-the-docker-container","text":"Run the follwing command to start the container: docker start json-simulator The simulator is now active and the random and dynamic values will change every 30 second. It will run in the background and not produce any output in the terminal/command window.","title":"3. Start the Docker container"},{"location":"setup_simulator/#4-stop-and-remove-the-docker-container","text":"Once you are done using the docker based simulator you can stop it with the following command: docker stop json-simulator and remove the container with the following command: docker rm json-simulator","title":"4. Stop and remove the Docker container"},{"location":"setup_simulator/#all-docker-commands-in-one-window","text":"Tip The dynamic and random values will change for every GET or POST Request.","title":"All Docker commands in one window"},{"location":"setup_simulator/#the-simulator","text":"The json-simulator is simulating 2 device payload for GET method and 1 device for POST method delivering the following data points:","title":"The Simulator"},{"location":"setup_simulator/#payload-for-get-method","text":"Device - 1 : { \"Voltage L1-L2\": 221.868, \"Device-Name\": \"Json-over-http Simulator 1\", \"Working\": true, \"Temperature\": 18.67, \"Currents\": { \"L1\": 3, \"L2\": 5, \"L3\": 8 }, \"Active Alarms\": [] } Device - 2: { \"Voltage L1-L2\": 414.613, \"Device-Name\": \"Json-over-http Simulator 2\", \"Working\": false, \"Temperature\": 17.217, \"Active Alarms\": [ \"Overvoltage\", \"Device not running\" ] }","title":"Payload for GET method"},{"location":"setup_simulator/#payload-for-post-method","text":"Device - 3: To get the response from the device use below command in terminal or command window curl -X POST -d \"['Temperature','Voltage L1-L2','Device-Name','Working','Active Alarms']\" http://localhost:8080/device-3 The Response should be as seen below, {\"Temperature\": 22.088, \"Voltage L1-L2\": 419.303, \"Device-Name\": \"Json-over-http Simulator 3 (POST)\", \"Working\": false, \"Active Alarms\": [\"Overvoltage\", \"Device not running\"]} Note All three devices are using port 8080. So you need to use the localhost IP Address along with the port number and enpoint details. GET - 127.0.0.1:8080/device-1 GET - 127.0.0.1:8080/device-2 POST - Use the above curl command to get the values. Congratulations you have successfully setup a json simulator environment using a preconfigured docker container.","title":"Payload for POST method"}]}