[
    {
        "id": "3ee4e36.fe8841c",
        "type": "tab",
        "label": "Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "73893bfe.a87b84",
        "type": "tab",
        "label": "Collect And Send Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8d9ccddd.ba723",
        "type": "tab",
        "label": "SenseHAT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "798bf7c0.ef5a68",
        "type": "tab",
        "label": "Apply Load",
        "disabled": false,
        "info": ""
    },
    {
        "id": "61648ed7.6b2b5",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "700f2c225889c9bf",
        "type": "group",
        "z": "3ee4e36.fe8841c",
        "name": "Initialization",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1e601a8e.1b20b5",
            "34dd0976.d75b66",
            "489be4cc.5f893c",
            "30b3a7ec.4c2e58",
            "12c2ea86.d98775",
            "14daccb9.8c9ec3"
        ],
        "x": 14,
        "y": 131.5,
        "w": 822,
        "h": 129.5
    },
    {
        "id": "9f9293f175cc6344",
        "type": "group",
        "z": "3ee4e36.fe8841c",
        "name": "!!!   ---   HANDLE WITH CARE   ---    !!!",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "eaf5f85a.e4b808",
            "920f7f6f.858ee",
            "a3abd7b6.ff2dd8",
            "ccb2e1fa.5ff0d",
            "3f72a9c2.75e276",
            "49f3a23.ff3565c",
            "aff0c453dfee6238"
        ],
        "x": 14,
        "y": 351.5,
        "w": 432,
        "h": 257
    },
    {
        "id": "109b099115b3c4d0",
        "type": "group",
        "z": "61648ed7.6b2b5",
        "name": "RPE Control",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "a4888d62.e88aa",
            "f98d4a79.9bfb28",
            "38e5f7a7.01ac38",
            "33a05fcb.9f36a",
            "d274dc16.c88d8",
            "64d0e864.286e08",
            "8463c0ca.2f3ab",
            "5be4c423.91ba4c"
        ],
        "x": 854,
        "y": 219,
        "w": 532,
        "h": 242
    },
    {
        "id": "2b6eb1450d283f25",
        "type": "group",
        "z": "61648ed7.6b2b5",
        "name": "RPE Engine",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "6b0e66f9.ec6958",
            "528ff4ba.02c95c",
            "11148252.1904fe",
            "f378ef61.d3f79",
            "c4a3bdd.400584",
            "fb87fa09.6f1a58",
            "bfcb89f6.7bb3c8",
            "a67e412b.a5c0f",
            "c45627bc.0370f8",
            "71f4c228.47365c",
            "17194546.60dadb",
            "c310f74c.3775b8",
            "4e4f7135.3f02a",
            "b5183470.dad128",
            "58f89348.065e6c"
        ],
        "x": 154,
        "y": 79,
        "w": 492,
        "h": 522
    },
    {
        "id": "d6c8a590b268b5ca",
        "type": "group",
        "z": "61648ed7.6b2b5",
        "name": "RPE Environment",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "cab4d3a0.021a3",
            "b3d37c92.84876",
            "5bbad246.5ec8cc",
            "2c232fc7.229d1",
            "eb088ca0.88a27",
            "993656bc.a1f688",
            "57b66ea9.e1bf9",
            "e61fec25.4d398",
            "b2c02807.212498"
        ],
        "x": 154,
        "y": 619,
        "w": 492,
        "h": 282
    },
    {
        "id": "08b8b87636998369",
        "type": "group",
        "z": "61648ed7.6b2b5",
        "name": "Add <hostname> (<version>) to the header",
        "style": {
            "fill": "#ffefbf",
            "label": true
        },
        "nodes": [
            "31adf671.4e490a",
            "208c4960.254676",
            "9aaf1603.7370d8"
        ],
        "x": 854,
        "y": 79,
        "w": 432,
        "h": 122
    },
    {
        "id": "1e0e35513a7c25d8",
        "type": "junction",
        "z": "8d9ccddd.ba723",
        "x": 540,
        "y": 900,
        "wires": [
            [
                "a8ddf4c7.b5c138"
            ]
        ]
    },
    {
        "id": "7fea466e.f901c8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a686ed88.71b16",
        "type": "ui_tab",
        "name": "RP Engine",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "256c4300.e3f7fc",
        "type": "ui_group",
        "name": "Gauges",
        "tab": "a686ed88.71b16",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a7453a16.b230e8",
        "type": "ui_group",
        "name": "Charts",
        "tab": "a686ed88.71b16",
        "order": 2,
        "disp": false,
        "width": "20",
        "collapse": false
    },
    {
        "id": "93a92e04.c9567",
        "type": "ui_group",
        "name": "Actions",
        "tab": "e1d00baa.5657b8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e1d00baa.5657b8",
        "type": "ui_tab",
        "name": "RPE Control",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6e8e4495.75857c",
        "type": "ui_tab",
        "name": "RP Environment",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cbb5541c.e417c8",
        "type": "ui_group",
        "name": "Gauges",
        "tab": "6e8e4495.75857c",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "af41c59d.611af8",
        "type": "ui_group",
        "name": "Charts",
        "tab": "6e8e4495.75857c",
        "order": 2,
        "disp": false,
        "width": "20",
        "collapse": false
    },
    {
        "id": "16b26fd6.25c22",
        "type": "ui_group",
        "name": "Information",
        "tab": "e1d00baa.5657b8",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "2a61624e.2eeeee",
        "type": "tls-config",
        "name": "MONITORDEMO2",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "masdev.messaging.iot.monitordemo2.ibmmam.com",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "74eae28f.f6e6f4",
        "type": "mqtt-broker",
        "name": "RPE042-CPU-01",
        "broker": "masdev.messaging.iot.monitordemo2.ibmmam.com",
        "port": "443",
        "tls": "2a61624e.2eeeee",
        "clientid": "d:masdev:CPU:RPE042-CPU-01",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5a440ff8.4f85e",
        "type": "mqtt-broker",
        "name": "RPE042-ENV-17",
        "broker": "masdev.messaging.iot.monitordemo2.ibmmam.com",
        "port": "443",
        "tls": "2a61624e.2eeeee",
        "clientid": "d:masdev:ENV:RPE042-ENV-17",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5f2e2a3b08e6ab88",
        "type": "mqtt-broker",
        "name": "RPE042-OSC-03",
        "broker": "masdev.messaging.iot.monitordemo2.ibmmam.com",
        "port": "443",
        "tls": "2a61624e.2eeeee",
        "clientid": "d:masdev:OSC:RPE042-OSC-03",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "eaf5f85a.e4b808",
        "type": "exec",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Reboot",
        "x": 340,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "920f7f6f.858ee",
        "type": "exec",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Shutdown",
        "x": 350,
        "y": 560,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a3abd7b6.ff2dd8",
        "type": "inject",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "name": "Reboot",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "eaf5f85a.e4b808"
            ]
        ]
    },
    {
        "id": "ccb2e1fa.5ff0d",
        "type": "inject",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "name": "Shutdown",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SHUTDOWN",
        "payloadType": "str",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "aff0c453dfee6238"
            ]
        ]
    },
    {
        "id": "62b7098f.210998",
        "type": "comment",
        "z": "3ee4e36.fe8841c",
        "name": "Local device management and global initialization",
        "info": "",
        "x": 210,
        "y": 60,
        "wires": []
    },
    {
        "id": "3f72a9c2.75e276",
        "type": "link in",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "name": "Reboot In",
        "links": [
            "38e5f7a7.01ac38"
        ],
        "x": 165,
        "y": 440,
        "wires": [
            [
                "eaf5f85a.e4b808"
            ]
        ]
    },
    {
        "id": "49f3a23.ff3565c",
        "type": "link in",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "name": "Shutdown In",
        "links": [
            "33a05fcb.9f36a",
            "96e85256.49588"
        ],
        "x": 165,
        "y": 560,
        "wires": [
            [
                "920f7f6f.858ee"
            ]
        ]
    },
    {
        "id": "2c4ccbbd.b34924",
        "type": "comment",
        "z": "3ee4e36.fe8841c",
        "name": "Created by Jan Ekstrøm - 2023-12-04 - v1.05 (Open to view Version History)",
        "info": "By jan.ekstrom@dk.ibm.com\n\nv1.05 2023-12-04:\n- Renamed the standard MQTT out nodes to a more generic RPE042-<device>-<number>\n- Filtered the IP address to only contain the IPv4 address (both IPv4 and IPv6 was way too long)\n\nv1.04 2023-01-12:\n- Deleted old mqtt nodes (EUDemo & CSUK18 MAM's) and cleaned up the configurations.\n\nv1.03 2022-12-29:\n- Cleaned up the Collect And Send Data flow and split up the data to three data sets \n  each having it's own MQTT connection to a device in MAS Monitor.\n- Commented out the pre-set environment data to be used only if the SenseHAT is missing\n- Changed Shutdown from Control flow to behave as shutdown via the joystick\n\n\nv1.02 2022-12-28:\n- Added three mqtt out nodes for CPU, OSC and ENV including the configurations.\n- Added \"measurement\" timestamps (evt_timestamp) for each of the three data sets, \n  so they have different timestamps simulating separate individual devices.\n\nv1.01 2022-12-28:\n- Preparing for the RPE on MAS flows, including removing support for External TEMPerHUM sensor \n  and removal of some superflous flows.\n\nv0.45 2022-12-28:\n- Updated version based on several additional flows have been added over the time to test \n  e.g. connectiong to a MAS Monitor instance (both as device and gateway).\n\nv0.44 2020-08-10:\n- Added support for TEMPerHUM USB Temperature & Humidity Sensor as provider of \n  External Temperature and Humidity (xt, xh).\n\nv0.43 2020-06-10:\n- Added the Get Ext data flow to listen to a local Mosquitto broker and receive \n  from an ESP32 board with an attached DHT22 (AM2302) sensor.\n\nv0.42 2020-05-20:\n- Moved the header info creation from dashboard to Collect An Send Data, \n  as a refresh of the UI Dashboard would make it dissapear. \n  Now it will automatically be induced into the header again when data is collected and send.\n- Added the ID name as the first text to be displayed on the SenseHat, when pushing UP.\n\nv0.41 2020-05-14:\n- Added RPE information in the right side of the header on the dashboard, e.g. RPE001 (v0.41)\n\nV0.40 2020-05-13:\n- Added 4 bars on the SenseHAT LEDs to indicate: CPU Load, CPU Temperature, Oscillator Temperature, Environment Temperature from the SenseHAT\n  There are 5 LEDs on each bar: 2\n  < 0 1 green, \n  < 40 2 green, \n  < 60 3green, \n  < 80 3 green + 1 yellow, \n  < 100 3 green + 1 yellow + 1 red\n\nv0.37 2020-05-11:\n- Tidy up some code in function nodes; removed superfluous code and debug nodes.\n- Moved collecting hardware version to the Control tab and stored in a global variable as it will never change.\n- Added Joystick function to show SW and HW versions on the SenseHAT\n- Added SW and HW versions to the RPE Control tab of the dashboard\n\nv0.35 2020-05-10:\n- Added logic for showing the status of the MQTT connections on the LED (0,7)\n\nv0.30 2020-05-07:\n- Added property for RPE software version.\n- Added property for hardware version.\n- Added properties for future eXternal DHT22 sensor: \n  Temperature and Humidity\n- Set default global variables for SenseHAT and DHT22 sensors, so that the flow can run on Pi's with or without those sensors attached.\n\nv0.20 2020-05-06:\n- Added ENTER on joystick to toggle the LED display on and off.\n- Added LEDs in lowest row to indicate MQTT connection state (not working yet - shows green) and the day of the week (green: Active - red: Inactive)\n\nv0.15 2020-05-05:\n- Added CRON+ to control when the measurements are being collected and transmitted + when the load tests are being performed:\nActive:   Monday-Friday 8am - 6pm CET\n          Every 10 seconds\nInactive: All other periods\n          Every 20 minutes\n- Added SenseHAT properties: Temperature, Humidity and Pressure\n\n\nv0.12 2020-05-04:\n- Added local dashboard\n- Added MQTT to send data\n- Added the Oscilator properties: \n  Frequency, Voltage and Temperature\n\n\nv0.10 2020-05-01:\n- Initial flows.\n- Using various CLI commands to gather sensor data every 10 seconds.\n- Run a 5 minute load test at 100% and the 10 minutes idleing.\n- Using CPU Load, CPU Temperature, Disk Usage and Free Memory",
        "x": 290,
        "y": 20,
        "wires": []
    },
    {
        "id": "1e601a8e.1b20b5",
        "type": "function",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "name": "Initialize",
        "func": "// Set the current SW Version\nlet sw = \"v1.05\";\nglobal.set('software',sw);\n\n// REMOVED in v1.01\n// Initialize the sensorvalues of an external Adafruit AM2302 wired DHT22 sensor\n// That way the flows run with or without that sensor attached\n// global.set('external',{\"temperature\":0.0,\"humidity\":0.0});\n\n// Initialize the sensorvalues if a SenseHAT is not mounted\n// That way the flows run without that HAT mounted\n// global.set('environment',{\"temperature\":0.0,\"humidity\":0.0,\"pressure\":0.0});\n\n\n// Initialize the status of the MQTT connections\nglobal.set('mqttStatusGlobal', [ '#000000', '#000000' ]);\n\nmsg = {}; // Clear message\nmsg.topic = \"Software\";\nmsg.payload = sw;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 180,
        "wires": [
            [
                "489be4cc.5f893c",
                "12c2ea86.d98775"
            ]
        ]
    },
    {
        "id": "34dd0976.d75b66",
        "type": "inject",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "name": "On Startup",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "1e601a8e.1b20b5"
            ]
        ]
    },
    {
        "id": "489be4cc.5f893c",
        "type": "exec",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "command": "cat /proc/device-tree/model",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "PI Revision",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "30b3a7ec.4c2e58"
            ],
            [],
            []
        ]
    },
    {
        "id": "30b3a7ec.4c2e58",
        "type": "function",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "name": "Formatting",
        "func": "// Format the hardware version information and store it in a global variable\nlet hw = msg.payload.toString().substring(10).replace('\\0', '');\nglobal.set('hardware', hw);\n\nmsg = {}; // Clear message\nmsg.topic = \"Hardware\";\nmsg.payload = hw;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "14daccb9.8c9ec3"
            ]
        ]
    },
    {
        "id": "12c2ea86.d98775",
        "type": "link out",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "name": "Software Version Out",
        "links": [
            "64d0e864.286e08",
            "7ea6570.3c061a8"
        ],
        "x": 415,
        "y": 220,
        "wires": []
    },
    {
        "id": "14daccb9.8c9ec3",
        "type": "link out",
        "z": "3ee4e36.fe8841c",
        "g": "700f2c225889c9bf",
        "name": "Hardware Version Out",
        "links": [
            "7ea6570.3c061a8",
            "5be4c423.91ba4c"
        ],
        "x": 795,
        "y": 180,
        "wires": []
    },
    {
        "id": "aff0c453dfee6238",
        "type": "link out",
        "z": "3ee4e36.fe8841c",
        "g": "9f9293f175cc6344",
        "name": "Initiate SHUTDOWN",
        "mode": "link",
        "links": [
            "a2abf7d778d721e6"
        ],
        "x": 295,
        "y": 520,
        "wires": []
    },
    {
        "id": "b54b9ec6.6ddb1",
        "type": "exec",
        "z": "73893bfe.a87b84",
        "command": "vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "RPi Temp.",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "a28b870d.2cd6d8"
            ],
            [],
            []
        ]
    },
    {
        "id": "a28b870d.2cd6d8",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Formatting",
        "func": "//Returns a number with CPU temperature in Celcius\nstr = msg.payload;\nmsg = {}; //Clear msg\nmsg.payload = parseFloat(str.substring(5,9));\nmsg.topic = \"ct\"; //cpu temperature\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "c11d10c2.4add4"
            ]
        ]
    },
    {
        "id": "8f9b3979.de9f88",
        "type": "exec",
        "z": "73893bfe.a87b84",
        "command": "top -d 0.7 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4 + $6}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "CPU Load",
        "x": 550,
        "y": 240,
        "wires": [
            [
                "8e3165c.e054298"
            ],
            [],
            []
        ]
    },
    {
        "id": "3e371427.1142dc",
        "type": "exec",
        "z": "73893bfe.a87b84",
        "command": "free | grep Mem | awk '{printf \"%.2f\\n\", 100*$3/$2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Free Memory",
        "x": 550,
        "y": 300,
        "wires": [
            [
                "cf715af9.bef248"
            ],
            [],
            []
        ]
    },
    {
        "id": "2e1e9740.37a6d8",
        "type": "exec",
        "z": "73893bfe.a87b84",
        "command": "df -h",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Disk Usage",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "d2f463b.006b2a"
            ],
            [],
            []
        ]
    },
    {
        "id": "d2f463b.006b2a",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Formatting",
        "func": "//Returns a number with percentage of disk used\nvar re = /([0-9]{2})%/\nvar idx = msg.payload.search(re);\nvar str = msg.payload;\nif (idx >=0) {\n    str = msg.payload.substring(idx, idx + 2);\n}\nmsg = {}; //Clear msg\nmsg.payload = parseFloat(str);\nmsg.topic = \"du\"; //disk usage\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 360,
        "wires": [
            [
                "b569ad9.848fe5"
            ]
        ]
    },
    {
        "id": "8e3165c.e054298",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Formatting",
        "func": "//Returns a number with CPU load in percent\nstr = msg.payload;\nmsg = {}; //Clear msg\nmsg.payload = parseFloat(str);\nmsg.topic = \"cl\"; //cpu load\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "c0ad344.6f87fc8"
            ]
        ]
    },
    {
        "id": "cf715af9.bef248",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Formatting",
        "func": "//Returns a number with percentage of memory used\nstr = msg.payload;\nmsg = {}; //Clear msg\nmsg.payload = parseFloat(str);\nmsg.topic = \"mu\"; //memory usage\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 300,
        "wires": [
            [
                "6b1b894c.ad3cf8"
            ]
        ]
    },
    {
        "id": "c11d10c2.4add4",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "CPU Temp Out",
        "links": [
            "8fc703df.8479d",
            "6b0e66f9.ec6958",
            "6fbf7a67.9ea0a4",
            "7a7d0410.cb589c",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 220,
        "wires": []
    },
    {
        "id": "c0ad344.6f87fc8",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "CPU Load Out",
        "links": [
            "af5b31d.bddb2d",
            "528ff4ba.02c95c",
            "6fbf7a67.9ea0a4",
            "2d778e6a.46db4a",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 260,
        "wires": []
    },
    {
        "id": "6b1b894c.ad3cf8",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "Memory Usage Out",
        "links": [
            "942c5a22.a92498",
            "49f6ebe2.c8cc54",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 300,
        "wires": []
    },
    {
        "id": "b569ad9.848fe5",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "Disk Usage Out",
        "links": [
            "e7ec70f2.83c09",
            "666dd8b5.26397",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 340,
        "wires": []
    },
    {
        "id": "c6e208e3.80d088",
        "type": "exec",
        "z": "73893bfe.a87b84",
        "command": "vcgencmd read_ring_osc",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "RPi Osc",
        "x": 540,
        "y": 460,
        "wires": [
            [
                "3cf74c5f.cabe94"
            ],
            [],
            []
        ]
    },
    {
        "id": "3cf74c5f.cabe94",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Formatting",
        "func": "//Returns the curent speed, voltage and temperature of the ring oscillator\n//RPi3B+ response example:\n//read_ring_osc(2)=2.923MHz (@1.2000V) (58.5'C)\nstr = msg.payload;\nlet msg1 = {};\nlet msg2 = {};\nlet msg3 = {};\nmsg1.payload = parseFloat(str.substring(17,22));\nmsg1.topic = \"of\"; //Oscillator Frequency\nmsg2.payload = parseFloat(str.substring(28,34));\nmsg2.topic = \"ov\"; //Oscillator Voltage\nmsg3.payload = parseFloat(str.substring(38,42));\nmsg3.topic = \"ot\"; //Oscillator Temperature\nreturn [msg1,msg2,msg3];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 730,
        "y": 460,
        "wires": [
            [
                "cae323ee.ed361"
            ],
            [
                "aa4303ca.ea1b3"
            ],
            [
                "85ea289c.fc3c98"
            ]
        ]
    },
    {
        "id": "1487df7.b940121",
        "type": "delay",
        "z": "73893bfe.a87b84",
        "name": "",
        "pauseType": "delay",
        "timeout": "1500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 360,
        "y": 460,
        "wires": [
            [
                "c6e208e3.80d088"
            ]
        ]
    },
    {
        "id": "cae323ee.ed361",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "OSC Frequency Out",
        "links": [
            "7b620aaa.1b09f4",
            "bfcb89f6.7bb3c8",
            "f333cbd5.e1ace8",
            "e3966774.5ce0c",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 420,
        "wires": []
    },
    {
        "id": "85ea289c.fc3c98",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "OSC Temperature Out",
        "links": [
            "ae23c2fe.57226",
            "4e4f7135.3f02a",
            "f333cbd5.e1ace8",
            "4eed876e.168b7",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 500,
        "wires": []
    },
    {
        "id": "aa4303ca.ea1b3",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "OSC Voltage Out",
        "links": [
            "84e2f8a3.c1d1f8",
            "71f4c228.47365c",
            "33946828.407f68",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 460,
        "wires": []
    },
    {
        "id": "9a9e68ef.62d408",
        "type": "delay",
        "z": "73893bfe.a87b84",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "8f9b3979.de9f88"
            ]
        ]
    },
    {
        "id": "a274873d.1c3238",
        "type": "comment",
        "z": "73893bfe.a87b84",
        "name": "This flow get the measurements from the Pi sensors and send them to MAS Monitor",
        "info": "",
        "x": 310,
        "y": 20,
        "wires": []
    },
    {
        "id": "500e7c65.46fe54",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "SenseHAT Measurements",
        "func": "//Returns the temperature, humidity and pressure from the SenseHAT\nlet msg1 = {};\nlet msg2 = {};\nlet msg3 = {};\n\nvar environment = global.get('environment');\n\nmsg1.payload = environment.temperature;\nmsg1.topic = \"et\"; //SenseHAT Temperature\nmsg2.payload = environment.humidity;\nmsg2.topic = \"eh\"; //SenseHAT Humidity\nmsg3.payload = environment.pressure;\nmsg3.topic = \"ep\"; //SenseHAT Pressure\n\nreturn [msg1,msg2,msg3];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "b87965af.1f7108"
            ],
            [
                "e9c8ac43.25581"
            ],
            [
                "1aa05db0.453482"
            ]
        ]
    },
    {
        "id": "b87965af.1f7108",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "HAT Temperature Out",
        "links": [
            "12c9b964.5e75e7",
            "cab4d3a0.021a3",
            "f4a41f0f.8c4c9",
            "2d7c8027.e20658",
            "d27f151a.fe398",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 580,
        "wires": []
    },
    {
        "id": "e9c8ac43.25581",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "HAT Humidity Out",
        "links": [
            "9889fb3d.94ac28",
            "2c232fc7.229d1",
            "283dee8f.b99eaa",
            "2d7c8027.e20658",
            "9fae448.1053eb8",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 620,
        "wires": []
    },
    {
        "id": "1aa05db0.453482",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "HAT Pressure Out",
        "links": [
            "d87d903d.97608",
            "57b66ea9.e1bf9",
            "c73dfffe.5b78e8",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 660,
        "wires": []
    },
    {
        "id": "55194bb4.fa0be4",
        "type": "cronplus",
        "z": "73893bfe.a87b84",
        "name": "Measure",
        "outputField": "payload",
        "timeZone": "Europe/Copenhagen",
        "outputs": 1,
        "options": [
            {
                "topic": "Active",
                "payload": "Active",
                "type": "str",
                "expression": "*/10 * 8-17 * * MON-FRI",
                "name": "Active"
            },
            {
                "topic": "Inactive 1",
                "payload": "Inactive-Evening",
                "type": "str",
                "expression": "0 */20 18-23 * * MON-FRI",
                "name": "Inactive 1"
            },
            {
                "topic": "Inactive 2",
                "payload": "Inactive-Morning",
                "type": "str",
                "expression": "0 */20 0-7 * * MON-FRI",
                "name": "Inactive 2"
            },
            {
                "topic": "Inactive 3",
                "payload": "Inactive-Weekend",
                "type": "str",
                "expression": "0 */20 * * * SAT-SUN",
                "name": "Inactive 3"
            }
        ],
        "x": 100,
        "y": 340,
        "wires": [
            [
                "3e371427.1142dc",
                "9a9e68ef.62d408",
                "b54b9ec6.6ddb1",
                "2e1e9740.37a6d8",
                "1487df7.b940121",
                "500e7c65.46fe54",
                "76f2a54b.24bc7c",
                "1a9d0c93.b039f3",
                "e421c422.e524a"
            ]
        ]
    },
    {
        "id": "29f3bf9a.d8f41",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "76f2a54b.24bc7c",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "",
        "func": "// Create timestamp for now\nvar now     = new Date(msg.cronplus.triggerTimestamp);\nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds();   \nvar millisecond  = now.getMilliseconds();   \n\nif(month.toString().length == 1) {\nmonth = '0'+month;\n}\nif(day.toString().length == 1) {\nday = '0'+day;\n}   \nif(hour.toString().length == 1) {\nhour = '0'+hour;\n}\nif(minute.toString().length == 1) {\nminute = '0'+minute;\n}\nif(second.toString().length == 1) {\nsecond = '0'+second;\n}   \nif(millisecond.toString().length == 1) {\nmillisecond = '00' + millisecond;\n}   \nif(millisecond.toString().length == 2) {\nmillisecond = '0' + millisecond;\n}   \n\nmsg.timestamp = year+'-'+month+'-'+day+'T'+hour+':'+minute+':'+second+'.'+millisecond+'Z';\n\n\n\nglobal.set('state', msg.payload);\n\nflow.set('cron_timestamp', msg.timestamp);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 680,
        "wires": [
            [
                "29f3bf9a.d8f41"
            ]
        ]
    },
    {
        "id": "3b52686a.6a2c98",
        "type": "inject",
        "z": "73893bfe.a87b84",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "b54b9ec6.6ddb1",
                "9a9e68ef.62d408",
                "3e371427.1142dc",
                "2e1e9740.37a6d8",
                "1487df7.b940121",
                "500e7c65.46fe54",
                "1a9d0c93.b039f3"
            ]
        ]
    },
    {
        "id": "1a9d0c93.b039f3",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Software and hardware versions",
        "func": "//Get and returns the software and hardware versions\nlet msg1 = {};\nlet msg2 = {};\n\n\nmsg1.payload = global.get('software');\nmsg1.topic = \"sw\"; //Software Version\nmsg2.payload = global.get('hardware');\nmsg2.topic = \"hw\"; //Hardware Version\n\n\nreturn [msg1,msg2];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "b1468185.7dab4"
            ],
            [
                "724004ee.9cff2c"
            ]
        ]
    },
    {
        "id": "b1468185.7dab4",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "PI Software Out",
        "links": [
            "3106cc67.f74584",
            "8c9a9dd0.df0d28",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 100,
        "wires": []
    },
    {
        "id": "724004ee.9cff2c",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "PI Hardware Out",
        "links": [
            "20169cd7.35e864",
            "a115d0f4.16cfd8",
            "770dfd7f2012f39a"
        ],
        "x": 915,
        "y": 140,
        "wires": []
    },
    {
        "id": "d6bb00aa.e5ebf",
        "type": "status",
        "z": "73893bfe.a87b84",
        "name": "",
        "scope": [
            "7118a91a.e2607",
            "1391e5dd.3de56a",
            "c0a12d911f4bd465"
        ],
        "x": 180,
        "y": 900,
        "wires": [
            [
                "f721e5ff.f925b8"
            ]
        ]
    },
    {
        "id": "44817868.621b18",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 900,
        "wires": []
    },
    {
        "id": "165fdaae.ce3be5",
        "type": "comment",
        "z": "73893bfe.a87b84",
        "name": "1. Select the mqtt nodes in status node",
        "info": "",
        "x": 270,
        "y": 840,
        "wires": []
    },
    {
        "id": "f721e5ff.f925b8",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Store Connection Status",
        "func": "// Define number of MQTT connections which are read by the status node\n// This is important to get a correct indication of connection status on the SenseHAT\nlet numberOfConnections = 3;\n\nlet connections = context.get('mqtt_connections') || [];\n//let connections = context.get('mqtt_connections') || [{\"id\":\"bacdc4cb.b49ad8\",\"state\":\"HURRA\",\"name\":\"RPE001 (CSAP1XYZ)\"}];\n//node.warn(\"Number of objects: \" + connections.length + \" - Connections: \" + JSON.stringify(connections));\n\nlet id = msg.status.source.id;\nlet state = msg.status.text.substring(23);\nlet name = '';\nif (msg.status.source.name){\n    name = msg.status.source.name;\n}\n\nlet connectionObject = {'id': id, 'state': state, 'name': name};\n// node.warn(\"connectionObject = \" + JSON.stringify(connectionObject));\n\nlet index = connections.findIndex(connection => connection.id === id)\n\nif(index === -1) {\n    connections.push(connectionObject);\n    context.set('mqtt_connections', connections);\n    node.warn(\"Added, new object: \"+ JSON.stringify(connections));\n} else {\n    connections[index] = connectionObject;\n    context.set('mqtt_connections', connections);\n    node.warn(\"Replaced, new object: \"+ JSON.stringify(connections));\n}\n\n\n\nlet SUCCESS = [ '#008800', '#005500' ]; // Green\nlet ERROR   = [ '#880000', '#550000' ]; // Red\n//let UNKNOWN = [ '#000088', '#000055' ]; // Blue\nlet UNKNOWN = [ '#888800', '#555500' ]; // Yellow\nlet MISSING = [ '#000000', '#000000' ]; // Black\nlet mqttStatus = MISSING;\n\nif (numberOfConnections === connections.length) {\n    if (connections.every(connection => connection.state === \"connected\")) {\n        node.warn(\"Connections status: SUCCESS - #Connections: \"+connections.length);\n        // Store the RPE information for the dashboard\n        global.set('RPE-Name',connections[connections.length-1].name.substring(0, 6));\n        mqttStatus = SUCCESS;\n    } else {\n        if (connections.some(connection => connection.state === \"connected\")) {\n            node.warn(\"Connections status: UNKNOWN - #Connections: \"+connections.length);\n            mqttStatus = UNKNOWN;\n        } else {\n            node.warn(\"Connections status: ERROR - #Connections: \"+connections.length);\n            mqttStatus = ERROR;\n        }\n    }\n} else {\n    node.warn(\"Connections status: MISSING - #Connections: \"+connections.length);\n    mqttStatus = MISSING;\n    \n}\n\nglobal.set('mqttStatusGlobal', mqttStatus);\n\nmsg.payload = connectionObject;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 900,
        "wires": [
            [
                "44817868.621b18"
            ]
        ]
    },
    {
        "id": "a24daf7e.2177",
        "type": "comment",
        "z": "73893bfe.a87b84",
        "name": "2. Adjust numberOfConnections in the function node",
        "info": "",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "229f2012.72b8e",
        "type": "comment",
        "z": "73893bfe.a87b84",
        "name": "!!!!!!!!!!!!!!!!!!!  When changing | adding | removing mqtt nodes or connections it is very important to:  !!!!!!!!!!!!!!!!!!!",
        "info": "",
        "x": 490,
        "y": 800,
        "wires": []
    },
    {
        "id": "91e3da2f.7b976",
        "type": "inject",
        "z": "73893bfe.a87b84",
        "name": "5 sec after startup",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "e421c422.e524a"
            ]
        ]
    },
    {
        "id": "e421c422.e524a",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Put RPE Info on Dashbord header",
        "func": "let name = global.get('RPE-Name');\nlet ver = global.get('software');\n\nmsg.payload = name + \" (\" + ver + \")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 60,
        "wires": [
            [
                "5b723801.664c68"
            ]
        ]
    },
    {
        "id": "5b723801.664c68",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "Header Info Out",
        "mode": "link",
        "links": [
            "9aaf1603.7370d8"
        ],
        "x": 915,
        "y": 60,
        "wires": []
    },
    {
        "id": "7ad0fac3.541334",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Mem",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 300,
        "wires": []
    },
    {
        "id": "44654732.ba562",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Temp",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "6b25afb3.1f8a98",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Disk",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 340,
        "wires": []
    },
    {
        "id": "bc77d518.add42",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "CPU",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 260,
        "wires": []
    },
    {
        "id": "7a7d0410.cb589c",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "CPU Temp Join",
        "links": [
            "c11d10c2.4add4",
            "bd618830.7d3488"
        ],
        "x": 1015,
        "y": 220,
        "wires": [
            [
                "44654732.ba562",
                "735549c2.f837c8"
            ]
        ]
    },
    {
        "id": "2d778e6a.46db4a",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "CPU Load Join",
        "links": [
            "c0ad344.6f87fc8",
            "bd618830.7d3488"
        ],
        "x": 1015,
        "y": 260,
        "wires": [
            [
                "bc77d518.add42",
                "735549c2.f837c8"
            ]
        ]
    },
    {
        "id": "49f6ebe2.c8cc54",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "Memory Usage Join",
        "links": [
            "6b1b894c.ad3cf8"
        ],
        "x": 1015,
        "y": 300,
        "wires": [
            [
                "7ad0fac3.541334",
                "735549c2.f837c8"
            ]
        ]
    },
    {
        "id": "666dd8b5.26397",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "Disk Usage Join",
        "links": [
            "b569ad9.848fe5"
        ],
        "x": 1015,
        "y": 340,
        "wires": [
            [
                "6b25afb3.1f8a98",
                "735549c2.f837c8"
            ]
        ]
    },
    {
        "id": "30281cf1.afcdfc",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "RPi Info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1600,
        "y": 740,
        "wires": []
    },
    {
        "id": "9856d1fb.44b23",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Cleaning up",
        "func": "// Define the event properties\nlet eventType = \"event\";\nlet eventFormat = \"json\";\n\n// Clean up message\nlet str = msg.payload;\nmsg = {}; \n\n// Rebuild message\nmsg.payload = str;\nmsg.topic = \"iot-2/evt/\"+eventType+\"/fmt/\"+eventFormat;\n\n// Send message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 780,
        "wires": [
            [
                "30281cf1.afcdfc",
                "7f954fc5.82dd7"
            ]
        ]
    },
    {
        "id": "e3966774.5ce0c",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "OSC Frequency Join",
        "links": [
            "cae323ee.ed361"
        ],
        "x": 1015,
        "y": 420,
        "wires": [
            [
                "995f1270.01a0e",
                "1261dbfc.b855e4"
            ]
        ]
    },
    {
        "id": "4eed876e.168b7",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "OSC Temperature Join",
        "links": [
            "85ea289c.fc3c98"
        ],
        "x": 1015,
        "y": 500,
        "wires": [
            [
                "5257ee35.1280a",
                "1261dbfc.b855e4"
            ]
        ]
    },
    {
        "id": "33946828.407f68",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "OSC Voltage Join",
        "links": [
            "aa4303ca.ea1b3"
        ],
        "x": 1015,
        "y": 460,
        "wires": [
            [
                "563455cb.44d48c",
                "1261dbfc.b855e4"
            ]
        ]
    },
    {
        "id": "995f1270.01a0e",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Osc MHz",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1200,
        "y": 420,
        "wires": []
    },
    {
        "id": "563455cb.44d48c",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Osc V",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "5257ee35.1280a",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Osc 'C",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "d27f151a.fe398",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "HAT Temperature Join",
        "links": [
            "b87965af.1f7108"
        ],
        "x": 1015,
        "y": 580,
        "wires": [
            [
                "a3649fc0.deb9",
                "81b6ed1a.a75558"
            ]
        ]
    },
    {
        "id": "9fae448.1053eb8",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "HAT Humidity Join",
        "links": [
            "e9c8ac43.25581"
        ],
        "x": 1015,
        "y": 620,
        "wires": [
            [
                "6a6e4755.e84f5",
                "81b6ed1a.a75558"
            ]
        ]
    },
    {
        "id": "c73dfffe.5b78e8",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "HAT Pressure Join",
        "links": [
            "1aa05db0.453482"
        ],
        "x": 1015,
        "y": 660,
        "wires": [
            [
                "4d3687ab.849ce8",
                "81b6ed1a.a75558"
            ]
        ]
    },
    {
        "id": "6a6e4755.e84f5",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "HAT Humidity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 620,
        "wires": []
    },
    {
        "id": "a3649fc0.deb9",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "HAT Temperature",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 580,
        "wires": []
    },
    {
        "id": "4d3687ab.849ce8",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "HAT Pressure",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 660,
        "wires": []
    },
    {
        "id": "a115d0f4.16cfd8",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "PI Hardware Join",
        "links": [
            "724004ee.9cff2c"
        ],
        "x": 1015,
        "y": 140,
        "wires": [
            [
                "743d04ed.3ff96c"
            ]
        ]
    },
    {
        "id": "8c9a9dd0.df0d28",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "PI Software Join",
        "links": [
            "b1468185.7dab4"
        ],
        "x": 1015,
        "y": 100,
        "wires": [
            [
                "dcffdd02.f8a3f"
            ]
        ]
    },
    {
        "id": "743d04ed.3ff96c",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "Hardware Version",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 140,
        "wires": []
    },
    {
        "id": "dcffdd02.f8a3f",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "RPE Software Version",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1240,
        "y": 100,
        "wires": []
    },
    {
        "id": "7f954fc5.82dd7",
        "type": "link out",
        "z": "73893bfe.a87b84",
        "name": "Payload Out",
        "mode": "link",
        "links": [
            "616545ae.4f238c"
        ],
        "x": 1555,
        "y": 780,
        "wires": []
    },
    {
        "id": "735549c2.f837c8",
        "type": "join",
        "z": "73893bfe.a87b84",
        "name": "Join CPU data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1220,
        "y": 180,
        "wires": [
            [
                "81a731d9.9ecf4"
            ]
        ]
    },
    {
        "id": "1261dbfc.b855e4",
        "type": "join",
        "z": "73893bfe.a87b84",
        "name": "Join OSC data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1220,
        "y": 380,
        "wires": [
            [
                "72d08e04.356fb8"
            ]
        ]
    },
    {
        "id": "81b6ed1a.a75558",
        "type": "join",
        "z": "73893bfe.a87b84",
        "name": "Join HAT (ENV) data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1240,
        "y": 540,
        "wires": [
            [
                "e57e868e.94b2f"
            ]
        ]
    },
    {
        "id": "7118a91a.e2607",
        "type": "mqtt out",
        "z": "73893bfe.a87b84",
        "name": "RPE042-CPU-01",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74eae28f.f6e6f4",
        "x": 1630,
        "y": 180,
        "wires": []
    },
    {
        "id": "81a731d9.9ecf4",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Cleaning up",
        "func": "// Create timestamp for now\nlet now          = new Date();\nlet year         = now.getFullYear();\nlet month        = now.getMonth()+1; \nlet day          = now.getDate();\nlet hour         = now.getHours();\nlet minute       = now.getMinutes();\nlet second       = now.getSeconds();   \nlet millisecond  = now.getMilliseconds();   \n\nif(month.toString().length == 1)       {month = '0'+month;}\nif(day.toString().length == 1)         {day = '0'+day;}   \nif(hour.toString().length == 1)        {hour = '0'+hour;}\nif(minute.toString().length == 1)      {minute = '0'+minute;}\nif(second.toString().length == 1)      {second = '0'+second;}   \nif(millisecond.toString().length == 1) {millisecond = '00' + millisecond;}   \nif(millisecond.toString().length == 2) {millisecond = '0' + millisecond;}   \n\nlet timestamp = year+'-'+month+'-'+day+'T'+hour+':'+minute+':'+second+'.'+millisecond+'Z';\n\n\n// Define the event properties\nlet eventType = \"event\";\nlet eventFormat = \"json\";\n\n// Clean up message\nlet str = msg.payload;\nmsg = {}; \n\n// Rebuild message\nstr.evt_timestamp = timestamp;\nmsg.payload = str;\nmsg.topic = \"iot-2/evt/\"+eventType+\"/fmt/\"+eventFormat;\n\n// Send message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 180,
        "wires": [
            [
                "7118a91a.e2607",
                "74c95a05.017b4c"
            ]
        ]
    },
    {
        "id": "1391e5dd.3de56a",
        "type": "mqtt out",
        "z": "73893bfe.a87b84",
        "name": "RPE042-ENV-17",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5a440ff8.4f85e",
        "x": 1620,
        "y": 540,
        "wires": []
    },
    {
        "id": "74c95a05.017b4c",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "CPU Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 140,
        "wires": []
    },
    {
        "id": "72d08e04.356fb8",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Cleaning up",
        "func": "// Create timestamp for now\nlet now          = new Date();\nlet year         = now.getFullYear();\nlet month        = now.getMonth()+1; \nlet day          = now.getDate();\nlet hour         = now.getHours();\nlet minute       = now.getMinutes();\nlet second       = now.getSeconds();   \nlet millisecond  = now.getMilliseconds();   \n\nif(month.toString().length == 1)       {month = '0'+month;}\nif(day.toString().length == 1)         {day = '0'+day;}   \nif(hour.toString().length == 1)        {hour = '0'+hour;}\nif(minute.toString().length == 1)      {minute = '0'+minute;}\nif(second.toString().length == 1)      {second = '0'+second;}   \nif(millisecond.toString().length == 1) {millisecond = '00' + millisecond;}   \nif(millisecond.toString().length == 2) {millisecond = '0' + millisecond;}   \n\nlet timestamp = year+'-'+month+'-'+day+'T'+hour+':'+minute+':'+second+'.'+millisecond+'Z';\n\n\n// Define the event properties\nlet eventType = \"event\";\nlet eventFormat = \"json\";\n\n// Clean up message\nlet str = msg.payload;\nmsg = {}; \n\n// Rebuild message\nstr.evt_timestamp = timestamp;\nmsg.payload = str;\nmsg.topic = \"iot-2/evt/\"+eventType+\"/fmt/\"+eventFormat;\n\n// Send message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 380,
        "wires": [
            [
                "74133030.56ca8",
                "c0a12d911f4bd465"
            ]
        ]
    },
    {
        "id": "e57e868e.94b2f",
        "type": "function",
        "z": "73893bfe.a87b84",
        "name": "Cleaning up",
        "func": "// Create timestamp for now\nlet now          = new Date();\nlet year         = now.getFullYear();\nlet month        = now.getMonth()+1; \nlet day          = now.getDate();\nlet hour         = now.getHours();\nlet minute       = now.getMinutes();\nlet second       = now.getSeconds();   \nlet millisecond  = now.getMilliseconds();   \n\nif(month.toString().length == 1)       {month = '0'+month;}\nif(day.toString().length == 1)         {day = '0'+day;}   \nif(hour.toString().length == 1)        {hour = '0'+hour;}\nif(minute.toString().length == 1)      {minute = '0'+minute;}\nif(second.toString().length == 1)      {second = '0'+second;}   \nif(millisecond.toString().length == 1) {millisecond = '00' + millisecond;}   \nif(millisecond.toString().length == 2) {millisecond = '0' + millisecond;}   \n\nlet timestamp = year+'-'+month+'-'+day+'T'+hour+':'+minute+':'+second+'.'+millisecond+'Z';\n\n\n// Define the event properties\nlet eventType = \"event\";\nlet eventFormat = \"json\";\n\n// Clean up message\nlet str = msg.payload;\nmsg = {}; \n\n// Rebuild message\nstr.evt_timestamp = timestamp;\nmsg.payload = str;\nmsg.topic = \"iot-2/evt/\"+eventType+\"/fmt/\"+eventFormat;\n\n// Send message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 540,
        "wires": [
            [
                "35d7aae8.f1d82e",
                "1391e5dd.3de56a"
            ]
        ]
    },
    {
        "id": "74133030.56ca8",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "OSC Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 340,
        "wires": []
    },
    {
        "id": "35d7aae8.f1d82e",
        "type": "debug",
        "z": "73893bfe.a87b84",
        "name": "ENV Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 500,
        "wires": []
    },
    {
        "id": "770dfd7f2012f39a",
        "type": "link in",
        "z": "73893bfe.a87b84",
        "name": "Join All",
        "links": [
            "1aa05db0.453482",
            "6b1b894c.ad3cf8",
            "724004ee.9cff2c",
            "85ea289c.fc3c98",
            "aa4303ca.ea1b3",
            "b1468185.7dab4",
            "b569ad9.848fe5",
            "b87965af.1f7108",
            "c0ad344.6f87fc8",
            "c11d10c2.4add4",
            "cae323ee.ed361",
            "e9c8ac43.25581"
        ],
        "x": 1015,
        "y": 780,
        "wires": [
            [
                "67aa0ca96ab58c86"
            ]
        ]
    },
    {
        "id": "67aa0ca96ab58c86",
        "type": "join",
        "z": "73893bfe.a87b84",
        "name": "Join all",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "12",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1200,
        "y": 780,
        "wires": [
            [
                "9856d1fb.44b23"
            ]
        ]
    },
    {
        "id": "c0a12d911f4bd465",
        "type": "mqtt out",
        "z": "73893bfe.a87b84",
        "name": "RPE042-OSC-03",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f2e2a3b08e6ab88",
        "x": 1630,
        "y": 380,
        "wires": []
    },
    {
        "id": "2f5e0192.d6b20e",
        "type": "rpi-sensehat in",
        "z": "8d9ccddd.ba723",
        "name": "Environment",
        "motion": true,
        "env": true,
        "stick": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "dae47a3c.c09518"
            ]
        ]
    },
    {
        "id": "ebf7a50b.df0378",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "dae47a3c.c09518",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Save Measurments",
        "func": "// Set the environment global data\nglobal.set( msg.topic, msg.payload );\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "ebf7a50b.df0378"
            ]
        ]
    },
    {
        "id": "f826ab92.72b188",
        "type": "rpi-sensehat out",
        "z": "8d9ccddd.ba723",
        "name": "",
        "x": 970,
        "y": 900,
        "wires": []
    },
    {
        "id": "b8b27935.28c108",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Scroll Message",
        "func": "\nmsg.payload = msg.payload+' ';\n\nclearTimeout( flow.get('sense-hat-busy-to') );\nflow.set('sense-hat-busy', true );\nflow.set('sense-hat-busy-to', setTimeout( function(){\n    // console.log('t/o fired');\n    flow.set('sense-hat-busy', false );\n}, msg.payload.length*650)); // ~.5 sec per letter in the message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 860,
        "wires": [
            [
                "7cf1a8d2.c5aa48",
                "1e0e35513a7c25d8"
            ]
        ]
    },
    {
        "id": "6f3188d.c8e1778",
        "type": "link in",
        "z": "8d9ccddd.ba723",
        "name": "SenseHat MSG",
        "links": [
            "6a6ba2d3.42f7fc",
            "8892d43c.cd03d8",
            "9fce8976.e9db58",
            "2f78a9c.669a156",
            "551835ed.b39a6c",
            "e29d8694.4b0d18",
            "9a26f877.e6d468",
            "153be7b1.08be48",
            "206649cd.0a51d6",
            "80452e57.cc057",
            "242905b7.d04f5a",
            "79326522.f6dc3c",
            "c0710a72.cd3d18",
            "5ef43d55.94d584",
            "b084d669.ca4da8",
            "c048dacc.0cc308",
            "5fe5a6a0.0b24d8",
            "d09d8034.81d88",
            "7f030a60.492894",
            "667d8fc8.4d342",
            "70039e4b.ad13",
            "b253fd59.cbd0d"
        ],
        "x": 155,
        "y": 860,
        "wires": [
            [
                "b8b27935.28c108"
            ]
        ]
    },
    {
        "id": "9e1aa841.191308",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "Store SenseHat Environment data to Global Variable",
        "info": "",
        "x": 210,
        "y": 200,
        "wires": []
    },
    {
        "id": "f8b4f2c0.c167c",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "Control Status Lights and scrolling messages on LED",
        "info": "",
        "x": 220,
        "y": 740,
        "wires": []
    },
    {
        "id": "a8304bb.cbc8eb8",
        "type": "http in",
        "z": "8d9ccddd.ba723",
        "name": "",
        "url": "/monitor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "fb600db2.69527"
            ]
        ]
    },
    {
        "id": "28d1416d.b0025e",
        "type": "http response",
        "z": "8d9ccddd.ba723",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1100,
        "wires": []
    },
    {
        "id": "fb600db2.69527",
        "type": "template",
        "z": "8d9ccddd.ba723",
        "name": "HTML Monitor",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n\n    <div class=\"container\">\n\n      <h1>RP Engine SenseHat Monitor</h1>\n      \n      <table class=\"table\">\n\t<thead>\n\t  <tr>\n\t    <th class=\"\">d</th>\n\t    <th class=\"\">Value</th>\n\t    <th class=\"\">Comment</th>\n\t  </tr>\n\t</thead>\n\t<tbody>\n\n\t  <tr>\n\t    <th scope=\"row\">d.t</th>\n\t    <td id=\"d-t\"></td>\n\t    <td>environment.temperature (°C)</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.h</th>\n\t    <td id=\"d-h\"></td>\n\t    <td>environment.humidity (%)</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.p</th>\n\t    <td id=\"d-p\"></td>\n\t    <td>environment.pressure (hPa)</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.ax</th>\n\t    <td id=\"d-ax\"></td>\n\t    <td>motion.acceleration.x</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.ay</th>\n\t    <td id=\"d-ay\"></td>\n\t    <td>motion.acceleration.y</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.az</th>\n\t    <td id=\"d-az\"></td>\n\t    <td>motion.acceleration.z</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.gx</th>\n\t    <td id=\"d-gx\"></td>\n\t    <td>motion.gyroscope.x</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.gy</th>\n\t    <td id=\"d-gy\"></td>\n\t    <td>motion.gyroscope.y</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.gz</th>\n\t    <td id=\"d-gz\"></td>\n\t    <td>motion.gyroscope.z</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.or</th>\n\t    <td id=\"d-or\"></td>\n\t    <td>motion.orientation.roll</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.op</th>\n\t    <td id=\"d-op\"></td>\n\t    <td>motion.orientation.pitch</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.oy</th>\n\t    <td id=\"d-oy\"></td>\n\t    <td>motion.orientation.yaw</td>\n\t  </tr>\n\n\t  <tr>\n\t    <th scope=\"row\">d.c</th>\n\t    <td id=\"d-c\"></td>\n\t    <td>motion.compass (0-259)</td>\n\t  </tr>\n\n\t</tbody>\n    </table>\n\n    </div>\n    \n    <!-- Optional JavaScript -->\n    <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js\" integrity=\"sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js\" integrity=\"sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1\" crossorigin=\"anonymous\"></script>\n    \n    <script>\n        $(function(){\n      \n            setInterval( function(){\n\n                fetch('/measures')\n                .then( function(d){ return d.json(); })\n                .then( function(data){\n                    \n                    $('#d-t').text( data.environment.temperature );\n                    $('#d-h').text( data.environment.humidity );\n                    $('#d-p').text( data.environment.pressure );\n          \n                    $('#d-ax').text( data.motion.acceleration.x );\n                    $('#d-ay').text( data.motion.acceleration.y );\n                    $('#d-az').text( data.motion.acceleration.z );            \n        \n                    $('#d-gx').text( data.motion.gyroscope.x );\n                    $('#d-gy').text( data.motion.gyroscope.y );\n                    $('#d-gz').text( data.motion.gyroscope.z );   \n\n                    $('#d-or').text( data.motion.orientation.roll );\n                    $('#d-op').text( data.motion.orientation.pitch );\n                    $('#d-oy').text( data.motion.orientation.yaw );\n\n                    $('#d-c').text( data.motion.compass );    \n\n                }); // .then() \n\n            },500); // setInterval() every .5sec\n      \n        }); // document ready\n    </script>\n  </body>\n</html>\n",
        "output": "str",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "28d1416d.b0025e"
            ]
        ]
    },
    {
        "id": "c0825a26.a67bd8",
        "type": "inject",
        "z": "8d9ccddd.ba723",
        "name": "On Startup",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "3e1d541f.78f47c"
            ]
        ]
    },
    {
        "id": "5121b8e4.33f8f8",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "http://<ipAddr>:1880/monitor (web monitor for the SenseHAT data)",
        "info": "",
        "x": 260,
        "y": 1060,
        "wires": []
    },
    {
        "id": "59b2673e.2f6868",
        "type": "inject",
        "z": "8d9ccddd.ba723",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 100,
        "y": 820,
        "wires": [
            [
                "13def283.ec4b2d"
            ]
        ]
    },
    {
        "id": "13def283.ec4b2d",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Status Indicators",
        "func": "// ** DO NOTHING IF SENSE-HAT IS BUSY ** //\nif ( flow.get('sense-hat-busy') ) {\n    //node.warn(\"Sense-HAT is busy\");\n    return [null,null]; // don't do anything...\n}\n\n\n// ** CLEAR THE DISPLAY IF DisplayOff IT TRUE ** //\nif ( flow.get('displayOff') ){\n    //node.warn(\"displayOff is true\");\n    msg.payload = '';\n    return [null, msg];\n}\n//node.warn(\"displayOff is false\");\n\n\n// ** SET THE CONNECTION LED ACCORDING TO ITS STATE DEFINED ON THE \"Collect And Send Data\" TAB ** //\nvar mqttStatus = global.get('mqttStatusGlobal');\nmsg.payload = '0,7,' + mqttStatus[0];\n\n\n// ** SET THE APPRPRIATE WEEKDAY LED ACCORDING TO ITS STATE ** //\nvar date = new Date();\nvar daynum = date.getDay();\n\nif (daynum === 0) {\n    daynum = 7; //Sunday is the last day ;-)\n}\n\nvar state = global.get('state');\nvar stateLED = '#550000'; //Defaults to Inactive\n\nif (state == 'Active') {\n    stateLED = '#005500'; //Change to green\n}\n\nvar i;\nfor (i = 1; i < 8; i++) {\n  if (daynum === i) {\n      msg.payload += ',' + i + ',7,' + stateLED;\n  } else {\n      msg.payload += ',' + i + ',7,#000000';\n  }\n}\n\n\n// ** SET THE BAR LEDS ACCORDING TO THE DEFINED MEASUREMENTS ** //\n// Get the values to display\nlet CL = flow.get('CPU_Load'); //CPU Load\nlet CT = flow.get('CPU_Temp'); //CPU Temperature\nlet OT = flow.get('Osc_Temp'); //Oscillator Temperature\nlet ET = flow.get('Sense_Temp'); //SenseHAT Environmental Temperature\n\n\n// Create the bar for the SenseHAT LEDs at a given row based on the given value\nfunction bar(row, value){\n    // Defining the main colors\n    let G = '#005500'; // Green\n    let R = '#550000'; // Red\n    let Y = '#555500'; // Yellow\n    let N = '#000000'; // N = No color => Black\n    let LEDs = '';\n    switch (true) {\n        case (value < 20):\n            LEDs = row+\",5,\"+G+\",\"+row+\",4,\"+N+\",\"+row+\",3,\"+N+\",\"+row+\",2,\"+N+\",\"+row+\",1,\"+N;\n            break;\n        case (value < 40):\n            LEDs = row+\",5,\"+G+\",\"+row+\",4,\"+G+\",\"+row+\",3,\"+N+\",\"+row+\",2,\"+N+\",\"+row+\",1,\"+N;\n            break;\n        case (value < 60):\n            LEDs = row+\",5,\"+G+\",\"+row+\",4,\"+G+\",\"+row+\",3,\"+G+\",\"+row+\",2,\"+N+\",\"+row+\",1,\"+N;\n            break;\n        case (value < 80):\n            LEDs = row+\",5,\"+G+\",\"+row+\",4,\"+G+\",\"+row+\",3,\"+G+\",\"+row+\",2,\"+Y+\",\"+row+\",1,\"+N;\n            break;\n        default:\n            LEDs = row+\",5,\"+G+\",\"+row+\",4,\"+G+\",\"+row+\",3,\"+G+\",\"+row+\",2,\"+Y+\",\"+row+\",1,\"+R;\n            break;\n    }\n    return LEDs;\n}\n\n// The bars will be at 0,2,4,6\nmsg.payload += \",\"+bar(0,CL)+\",\"+bar(2,CT)+\",\"+bar(4,OT)+\",\"+bar(6,ET);\n\n\n// ** BLINK THE CONNECTION LED ACCORDING TO ITS STATE FOR 1/4 SECOND ** //\nsetTimeout( function() {\n    if ( flow.get('sense-hat-busy') ) {\n        return [null, null]; // don't do anything...\n    }\n    node.send({ payload: '0,7,' + mqttStatus[1]});  //Make the MQTT state blink\n}, 250 );\n\n\nreturn [msg,null];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 350,
        "y": 820,
        "wires": [
            [
                "61aeeef9.cd19f",
                "1e0e35513a7c25d8"
            ],
            [
                "d723898d.d07728",
                "cdf48f1d.8f437"
            ]
        ]
    },
    {
        "id": "9f5355aa.e076e8",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Clear LEDs",
        "func": "\nclearTimeout( flow.get('sense-hat-busy-to') );\nflow.set('sense-hat-busy', true );\nflow.set('sense-hat-busy-to', setTimeout( function(){\n    flow.set('sense-hat-busy', false );\n}, 1*1000 )); // 1 sec\nmsg.payload = \"*,*,#000000\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 900,
        "wires": [
            [
                "fef14420.038a38",
                "1e0e35513a7c25d8"
            ]
        ]
    },
    {
        "id": "63d4a9df.4ebc78",
        "type": "link in",
        "z": "8d9ccddd.ba723",
        "name": "ClearLEDs",
        "links": [
            "8702cce6.85d2a",
            "74b0e337.ce1efc",
            "d723898d.d07728"
        ],
        "x": 155,
        "y": 900,
        "wires": [
            [
                "9f5355aa.e076e8"
            ]
        ]
    },
    {
        "id": "1e58cc1b.2027b4",
        "type": "rpi-sensehat in",
        "z": "8d9ccddd.ba723",
        "name": "Joystick",
        "motion": false,
        "env": false,
        "stick": true,
        "x": 100,
        "y": 380,
        "wires": [
            [
                "641ce781.df92a8",
                "abc7d339.0315e"
            ]
        ]
    },
    {
        "id": "641ce781.df92a8",
        "type": "switch",
        "z": "8d9ccddd.ba723",
        "name": "Key State",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "994fb5c6.7df708"
            ],
            [],
            [
                "455d4547.e47b1c"
            ]
        ],
        "outputLabels": [
            "key press",
            "",
            ""
        ]
    },
    {
        "id": "994fb5c6.7df708",
        "type": "switch",
        "z": "8d9ccddd.ba723",
        "name": "Key Press",
        "property": "payload.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "UP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DOWN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LEFT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ENTER",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 340,
        "y": 440,
        "wires": [
            [
                "5eb77e76.813eb",
                "8e7972e01eead2a2"
            ],
            [
                "7134a1e.5257b6"
            ],
            [],
            [
                "7c858be8.90ea14"
            ]
        ],
        "outputLabels": [
            "UP",
            "DOWN",
            "LEFT",
            "PUSH"
        ]
    },
    {
        "id": "81cbdcf9.b0148",
        "type": "exec",
        "z": "8d9ccddd.ba723",
        "command": "hostname",
        "addpay": false,
        "append": "-I",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Get IP Address",
        "x": 900,
        "y": 300,
        "wires": [
            [
                "7e989acc.bb6684",
                "f104dbb7.601538"
            ],
            [],
            []
        ]
    },
    {
        "id": "7e989acc.bb6684",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "IP Address",
        "func": "let ipAddresses = msg.payload.trim().split(\" \");\n\nlet ipAddressV4 = ipAddresses[0];\n\nmsg.payload = 'IP: ' + ipAddressV4;\nmsg.color   = '#0000ff'; // Blue\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "242905b7.d04f5a",
                "3422a63a36af4b72"
            ]
        ]
    },
    {
        "id": "242905b7.d04f5a",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show IP Address",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 320,
        "wires": []
    },
    {
        "id": "a5c71bff.478c88",
        "type": "exec",
        "z": "8d9ccddd.ba723",
        "command": "cat",
        "addpay": false,
        "append": "/sys/class/net/e*/address",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Get MAC Address",
        "x": 890,
        "y": 420,
        "wires": [
            [
                "4dcd0d98.f8d904"
            ],
            [],
            []
        ]
    },
    {
        "id": "4dcd0d98.f8d904",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "MAC Address",
        "func": "\nmsg.payload = 'MAC: ' + msg.payload.trim().replace(/:/g,' ');\n\nmsg.color = '#00ff00'; // GREEN\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 440,
        "wires": [
            [
                "79326522.f6dc3c"
            ]
        ]
    },
    {
        "id": "79326522.f6dc3c",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show MAC Address",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 440,
        "wires": []
    },
    {
        "id": "5d1e1cd4.65bdf4",
        "type": "exec",
        "z": "8d9ccddd.ba723",
        "command": "iwgetid",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Get SSID",
        "x": 900,
        "y": 360,
        "wires": [
            [
                "a429bd00.67842"
            ],
            [],
            []
        ]
    },
    {
        "id": "a429bd00.67842",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "WIFI SSID",
        "func": "\nvar wifi = msg.payload.match(/SSID:\"(.*)\"/);\n\nif ( wifi ) {\n    \n    msg.payload = 'WIFI: ' + wifi[1];\n    msg.color   = '#ffff00'; // Yellow\n    \n} else {\n\n    msg.payload = 'NO WIFI';\n    msg.color   = '#ff0000'; // Red\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "c0710a72.cd3d18"
            ]
        ]
    },
    {
        "id": "c0710a72.cd3d18",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show SSID",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 380,
        "wires": []
    },
    {
        "id": "5eb77e76.813eb",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "next msg",
        "func": "\nvar STATUS_MESSAGE_COUNT = 3; // total number of status messages\n\nvar statusIndex = context.get('next-status') || 0;\n\nmsg.payload = statusIndex % STATUS_MESSAGE_COUNT;\n\ncontext.set('next-status', statusIndex + 1 );\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 420,
        "wires": [
            [
                "b87ea44d.b8bfc8",
                "9e097d2abe9d08af"
            ]
        ]
    },
    {
        "id": "b87ea44d.b8bfc8",
        "type": "switch",
        "z": "8d9ccddd.ba723",
        "name": "status msg",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 690,
        "y": 420,
        "wires": [
            [
                "81cbdcf9.b0148",
                "bb68e11e.54342"
            ],
            [
                "5d1e1cd4.65bdf4"
            ],
            [
                "a5c71bff.478c88"
            ]
        ]
    },
    {
        "id": "455d4547.e47b1c",
        "type": "switch",
        "z": "8d9ccddd.ba723",
        "name": "Held Down",
        "property": "payload.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RIGHT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "b1d0e69a.352138"
            ]
        ],
        "outputLabels": [
            "RIGHT"
        ]
    },
    {
        "id": "b1d0e69a.352138",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Shutdown?",
        "func": "\n//\n// 'Press and hold' a button logic\n//\n\nclearTimeout( flow.get('status-timeout') );\nflow.set( 'status-timout', setTimeout( function(){\n    flow.set( 'status-timeout', 0 );\n}));\n\nvar count = flow.get('shutdown-count') || 0;\ncount = count + 1\nmsg.count = count;\nflow.set( 'shutdown-count', count );\n\nif ( count < 120 ){\n    return null; // don't pass this message on\n}\n\n// we have a shutdown event!\n\nmsg.payload = \"SHUTDOWN\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 640,
        "wires": [
            [
                "91f8c7e5.0a0c18"
            ]
        ]
    },
    {
        "id": "5ef43d55.94d584",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show Shutdown",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 855,
        "y": 600,
        "wires": []
    },
    {
        "id": "f817e42e.6e78d8",
        "type": "delay",
        "z": "8d9ccddd.ba723",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 900,
        "y": 640,
        "wires": [
            [
                "74b0e337.ce1efc",
                "96e85256.49588"
            ]
        ]
    },
    {
        "id": "74b0e337.ce1efc",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show empty",
        "links": [
            "63d4a9df.4ebc78"
        ],
        "x": 1035,
        "y": 600,
        "wires": []
    },
    {
        "id": "91f8c7e5.0a0c18",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Shutdown!",
        "func": "\nmsg.payload = \"SHUTDOWN\";\nmsg.color   = \"#ff0000\";\n\n// prevent another message from getting through while the pi shuts down\nclearTimeout( flow.get('status-timeout') );\n\n// prevent another shutdown event from getting through\nflow.set( 'shutdown-count', -9999 );\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 640,
        "wires": [
            [
                "5ef43d55.94d584",
                "f817e42e.6e78d8"
            ]
        ]
    },
    {
        "id": "4886db3.a7fff24",
        "type": "link in",
        "z": "8d9ccddd.ba723",
        "name": "Update Status Indicators",
        "links": [
            "d2b629d9.50c318",
            "aaa5d932.8ca748",
            "48d800d9.dd31e",
            "4fb26f7f.d1de7",
            "57d128ad.11b338"
        ],
        "x": 155,
        "y": 780,
        "wires": [
            [
                "13def283.ec4b2d",
                "3188a2.e5d0675e"
            ]
        ]
    },
    {
        "id": "13e35a00.605916",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "Handle SenseHAT Joystick Events",
        "info": "",
        "x": 160,
        "y": 320,
        "wires": []
    },
    {
        "id": "29046969.ba2ff6",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "LED Display",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 970,
        "y": 860,
        "wires": []
    },
    {
        "id": "a8ddf4c7.b5c138",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "rotate",
        "func": "msg.payload= \"R180\\n\"+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 900,
        "wires": [
            [
                "f826ab92.72b188",
                "29046969.ba2ff6"
            ]
        ]
    },
    {
        "id": "81656c01.f7fd6",
        "type": "delay",
        "z": "8d9ccddd.ba723",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "81cbdcf9.b0148"
            ]
        ]
    },
    {
        "id": "3e1d541f.78f47c",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Initialize",
        "func": "flow.set('displayOff', false);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "81656c01.f7fd6"
            ]
        ]
    },
    {
        "id": "bb68e11e.54342",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "Get IP Address",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 240,
        "wires": []
    },
    {
        "id": "f104dbb7.601538",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "IP Address",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "f00eccd1.0ec9b",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "This flow handles the interaction with the SenseHAT",
        "info": "",
        "x": 210,
        "y": 20,
        "wires": []
    },
    {
        "id": "42de917c.07f92",
        "type": "comment",
        "z": "8d9ccddd.ba723",
        "name": "Initialization",
        "info": "",
        "x": 90,
        "y": 80,
        "wires": []
    },
    {
        "id": "c5ed0ec8.8a252",
        "type": "http in",
        "z": "8d9ccddd.ba723",
        "name": "",
        "url": "/measures",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1140,
        "wires": [
            [
                "f6ca38a4.806b38"
            ]
        ]
    },
    {
        "id": "f6ca38a4.806b38",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "last measures",
        "func": "\nmsg.payload = {\n    environment: global.get('environment'),\n    motion: global.get('motion'),\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1140,
        "wires": [
            [
                "ca4d4bf3.0a7b18"
            ]
        ]
    },
    {
        "id": "ca4d4bf3.0a7b18",
        "type": "http response",
        "z": "8d9ccddd.ba723",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9ec0a50b.f9c978",
        "type": "inject",
        "z": "8d9ccddd.ba723",
        "name": "Clear",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "9f5355aa.e076e8"
            ]
        ]
    },
    {
        "id": "7c858be8.90ea14",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Toggle Display",
        "func": "flow.set( 'displayOff', !flow.get('displayOff') );\n\nmsg.payload = flow.get('displayOff');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 560,
        "wires": [
            [
                "57d128ad.11b338"
            ]
        ]
    },
    {
        "id": "57d128ad.11b338",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Toggle Display",
        "links": [
            "4886db3.a7fff24"
        ],
        "x": 675,
        "y": 560,
        "wires": []
    },
    {
        "id": "3188a2.e5d0675e",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 310,
        "y": 780,
        "wires": []
    },
    {
        "id": "abc7d339.0315e",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "Joystick",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 380,
        "wires": []
    },
    {
        "id": "d723898d.d07728",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Display Off",
        "links": [
            "63d4a9df.4ebc78"
        ],
        "x": 695,
        "y": 780,
        "wires": []
    },
    {
        "id": "61aeeef9.cd19f",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "DisplayON",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 740,
        "wires": []
    },
    {
        "id": "cdf48f1d.8f437",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "DisplayOFF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 820,
        "wires": []
    },
    {
        "id": "7cf1a8d2.c5aa48",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "Scroll Msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 860,
        "wires": []
    },
    {
        "id": "fef14420.038a38",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 750,
        "y": 940,
        "wires": []
    },
    {
        "id": "96e85256.49588",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Shutdown Out",
        "links": [
            "49f3a23.ff3565c"
        ],
        "x": 1035,
        "y": 640,
        "wires": []
    },
    {
        "id": "8f588a0f.0949d8",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "RPE Name",
        "func": "let name = global.get('RPE-Name');\n\nmsg.payload = 'ID: ' + name;\nmsg.color   = '#0000ff'; // Blue\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "667d8fc8.4d342"
            ]
        ]
    },
    {
        "id": "7134a1e.5257b6",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "next msg",
        "func": "\nvar STATUS_MESSAGE_COUNT = 3; // total number of status messages\n\nvar statusIndex = context.get('next-status') || 0;\n\nmsg.payload = statusIndex % STATUS_MESSAGE_COUNT;\n\ncontext.set('next-status', statusIndex + 1 );\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 480,
        "wires": [
            [
                "5ea8f4d1.16ceec"
            ]
        ]
    },
    {
        "id": "5ea8f4d1.16ceec",
        "type": "switch",
        "z": "8d9ccddd.ba723",
        "name": "status msg",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 690,
        "y": 480,
        "wires": [
            [
                "8f588a0f.0949d8"
            ],
            [
                "e913af4b.58352"
            ],
            [
                "63d2f6f4.7eb078"
            ]
        ]
    },
    {
        "id": "63d2f6f4.7eb078",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Hardware Version",
        "func": "let hw = global.get('hardware');\n\nmsg.payload = 'HW: ' + hw;\nmsg.color   = '#00ff00'; // Green\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "70039e4b.ad13"
            ]
        ]
    },
    {
        "id": "667d8fc8.4d342",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show RPE ID Version",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 480,
        "wires": []
    },
    {
        "id": "70039e4b.ad13",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show Hardware Version",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 560,
        "wires": []
    },
    {
        "id": "616545ae.4f238c",
        "type": "link in",
        "z": "8d9ccddd.ba723",
        "name": "Payload to LEDs",
        "links": [
            "bc98cb86.872a18",
            "7f954fc5.82dd7"
        ],
        "x": 155,
        "y": 980,
        "wires": [
            [
                "d13fc428.8b4e08"
            ]
        ]
    },
    {
        "id": "d13fc428.8b4e08",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Set bar values to display",
        "func": "// Select the values to display\nflow.set('CPU_Load', msg.payload.cl); //CPU Load\nflow.set('CPU_Temp', msg.payload.ct); //CPU Temperature\nflow.set('Osc_Temp', msg.payload.ot); //Oscillator Temperature\nflow.set('Sense_Temp', msg.payload.et); //SenseHAT Temperature\n",
        "outputs": 0,
        "noerr": 0,
        "x": 370,
        "y": 980,
        "wires": []
    },
    {
        "id": "e913af4b.58352",
        "type": "function",
        "z": "8d9ccddd.ba723",
        "name": "Software Version",
        "func": "let sw = global.get('software');\n\nmsg.payload = 'SW: ' + sw;\nmsg.color   = '#ffff00'; // Yellow\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 520,
        "wires": [
            [
                "b253fd59.cbd0d"
            ]
        ]
    },
    {
        "id": "b253fd59.cbd0d",
        "type": "link out",
        "z": "8d9ccddd.ba723",
        "name": "Show Software Version",
        "links": [
            "6f3188d.c8e1778"
        ],
        "x": 1275,
        "y": 520,
        "wires": []
    },
    {
        "id": "a2abf7d778d721e6",
        "type": "link in",
        "z": "8d9ccddd.ba723",
        "name": "Shutdown",
        "links": [
            "aff0c453dfee6238"
        ],
        "x": 585,
        "y": 600,
        "wires": [
            [
                "91f8c7e5.0a0c18"
            ]
        ]
    },
    {
        "id": "8e7972e01eead2a2",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "Key Pressed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "9e097d2abe9d08af",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "Down",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "3422a63a36af4b72",
        "type": "debug",
        "z": "8d9ccddd.ba723",
        "name": "IP to be shown",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 260,
        "wires": []
    },
    {
        "id": "96ff70c2.ce962",
        "type": "exec",
        "z": "798bf7c0.ef5a68",
        "command": "sysbench --test=cpu --cpu-max-prime=100000 --num-threads=3 --max-time=300 run",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Loadtest",
        "x": 380,
        "y": 180,
        "wires": [
            [
                "e51d5d10.e6a52",
                "ad80f541.b7ec18"
            ],
            [
                "3553d28e.2e394e",
                "cb3a22bd.eadbc"
            ],
            [
                "386197d1.267f28",
                "572d7863.d80c68"
            ]
        ]
    },
    {
        "id": "e51d5d10.e6a52",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "1 - Complete",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "3553d28e.2e394e",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "2 - Complete",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "386197d1.267f28",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "3 - Complete",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 300,
        "wires": []
    },
    {
        "id": "ad80f541.b7ec18",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "1 - Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "cb3a22bd.eadbc",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "2 - Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 690,
        "y": 180,
        "wires": []
    },
    {
        "id": "572d7863.d80c68",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "3 - Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "62d71dfe.1d3b54",
        "type": "cronplus",
        "z": "798bf7c0.ef5a68",
        "name": "",
        "outputField": "payload",
        "timeZone": "Europe/Copenhagen",
        "outputs": 1,
        "options": [
            {
                "topic": "Every 15 min during working hours",
                "payload": "Start Load Test",
                "type": "str",
                "expression": "0 0,15,30,45 8-17 * * MON-FRI",
                "name": "Every 15 min during working hours"
            }
        ],
        "x": 140,
        "y": 200,
        "wires": [
            [
                "d59697c1.043ad8",
                "96ff70c2.ce962"
            ]
        ]
    },
    {
        "id": "d59697c1.043ad8",
        "type": "debug",
        "z": "798bf7c0.ef5a68",
        "name": "CRON+ Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "abfcbdf6.1d14c",
        "type": "comment",
        "z": "798bf7c0.ef5a68",
        "name": "This script handles the scheduled load test generation",
        "info": "",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "6b0e66f9.ec6958",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "CPU Temp Dashboard",
        "links": [
            "c11d10c2.4add4"
        ],
        "x": 195,
        "y": 120,
        "wires": [
            [
                "11148252.1904fe",
                "f378ef61.d3f79"
            ]
        ]
    },
    {
        "id": "528ff4ba.02c95c",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "CPU Load Dashboard",
        "links": [
            "c0ad344.6f87fc8"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "c4a3bdd.400584",
                "fb87fa09.6f1a58"
            ]
        ]
    },
    {
        "id": "11148252.1904fe",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "256c4300.e3f7fc",
        "order": 1,
        "width": "6",
        "height": "5",
        "gtype": "gage",
        "title": "CPU Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "f378ef61.d3f79",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "a7453a16.b230e8",
        "order": 1,
        "width": "20",
        "height": "5",
        "label": "CPU Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "45",
        "ymax": "85",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c4a3bdd.400584",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "256c4300.e3f7fc",
        "order": 1,
        "width": "6",
        "height": "5",
        "gtype": "gage",
        "title": "CPU Load",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "40",
        "seg2": "85",
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "fb87fa09.6f1a58",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "a7453a16.b230e8",
        "order": 1,
        "width": "20",
        "height": "5",
        "label": "CPU Load",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 510,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bfcb89f6.7bb3c8",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "OSC Frequency Dashboard",
        "links": [
            "cae323ee.ed361"
        ],
        "x": 195,
        "y": 320,
        "wires": [
            [
                "a67e412b.a5c0f",
                "c45627bc.0370f8"
            ]
        ]
    },
    {
        "id": "a67e412b.a5c0f",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "256c4300.e3f7fc",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "OSC Frequency",
        "label": "MHz",
        "format": "{{value}}",
        "min": "2.5",
        "max": "3.5",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "2.95",
        "seg2": "3.1",
        "x": 520,
        "y": 320,
        "wires": []
    },
    {
        "id": "c45627bc.0370f8",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "a7453a16.b230e8",
        "order": 1,
        "width": "20",
        "height": "4",
        "label": "OSC Frequency",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "2.9",
        "ymax": "3.4",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 520,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "71f4c228.47365c",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "Osc Voltagte Dashboard",
        "links": [
            "aa4303ca.ea1b3"
        ],
        "x": 195,
        "y": 420,
        "wires": [
            [
                "17194546.60dadb",
                "c310f74c.3775b8"
            ]
        ]
    },
    {
        "id": "17194546.60dadb",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "256c4300.e3f7fc",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "OSC Voltage",
        "label": "V",
        "format": "{{value}}",
        "min": "1.1",
        "max": "1.3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1.201",
        "seg2": "1.27",
        "x": 510,
        "y": 420,
        "wires": []
    },
    {
        "id": "c310f74c.3775b8",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "a7453a16.b230e8",
        "order": 1,
        "width": "20",
        "height": "4",
        "label": "OSC Voltage",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "1.15",
        "ymax": "1.35",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 510,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4e4f7135.3f02a",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "OSC Temperature Dashboard",
        "links": [
            "85ea289c.fc3c98"
        ],
        "x": 195,
        "y": 520,
        "wires": [
            [
                "b5183470.dad128",
                "58f89348.065e6c"
            ]
        ]
    },
    {
        "id": "b5183470.dad128",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "256c4300.e3f7fc",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "OSC Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "58f89348.065e6c",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "2b6eb1450d283f25",
        "name": "",
        "group": "a7453a16.b230e8",
        "order": 1,
        "width": "20",
        "height": "4",
        "label": "OSC Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "45",
        "ymax": "85",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 530,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7823c1d.0c8234",
        "type": "comment",
        "z": "61648ed7.6b2b5",
        "name": "This flow takes care of the local dashboard",
        "info": "",
        "x": 180,
        "y": 20,
        "wires": []
    },
    {
        "id": "a4888d62.e88aa",
        "type": "ui_button",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "",
        "group": "93a92e04.c9567",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 960,
        "y": 260,
        "wires": [
            [
                "38e5f7a7.01ac38"
            ]
        ]
    },
    {
        "id": "f98d4a79.9bfb28",
        "type": "ui_button",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "",
        "group": "93a92e04.c9567",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Shutdown",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 950,
        "y": 320,
        "wires": [
            [
                "33a05fcb.9f36a"
            ]
        ]
    },
    {
        "id": "cab4d3a0.021a3",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "HAT Temperature Dashboard",
        "links": [
            "b87965af.1f7108"
        ],
        "x": 195,
        "y": 660,
        "wires": [
            [
                "b3d37c92.84876",
                "5bbad246.5ec8cc"
            ]
        ]
    },
    {
        "id": "b3d37c92.84876",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "cbb5541c.e417c8",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "HAT Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "x": 530,
        "y": 660,
        "wires": []
    },
    {
        "id": "5bbad246.5ec8cc",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "af41c59d.611af8",
        "order": 1,
        "width": "20",
        "height": "6",
        "label": "HAT Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "10",
        "ymax": "50",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 530,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "38e5f7a7.01ac38",
        "type": "link out",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "Reboot Out",
        "links": [
            "3f72a9c2.75e276"
        ],
        "x": 1195,
        "y": 260,
        "wires": []
    },
    {
        "id": "33a05fcb.9f36a",
        "type": "link out",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "Shutdown Out",
        "links": [
            "49f3a23.ff3565c"
        ],
        "x": 1195,
        "y": 320,
        "wires": []
    },
    {
        "id": "2c232fc7.229d1",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "HAT Temperature Dashboard",
        "links": [
            "e9c8ac43.25581"
        ],
        "x": 195,
        "y": 740,
        "wires": [
            [
                "eb088ca0.88a27",
                "993656bc.a1f688"
            ]
        ]
    },
    {
        "id": "eb088ca0.88a27",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "cbb5541c.e417c8",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "HAT Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "x": 520,
        "y": 740,
        "wires": []
    },
    {
        "id": "993656bc.a1f688",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "af41c59d.611af8",
        "order": 1,
        "width": "20",
        "height": "6",
        "label": "HAT Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 520,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "57b66ea9.e1bf9",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "HAT Temperature Dashboard",
        "links": [
            "1aa05db0.453482"
        ],
        "x": 195,
        "y": 820,
        "wires": [
            [
                "e61fec25.4d398",
                "b2c02807.212498"
            ]
        ]
    },
    {
        "id": "e61fec25.4d398",
        "type": "ui_gauge",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "cbb5541c.e417c8",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "HAT Pressure",
        "label": "mbar",
        "format": "{{value}}",
        "min": "900",
        "max": "1100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 520,
        "y": 820,
        "wires": []
    },
    {
        "id": "b2c02807.212498",
        "type": "ui_chart",
        "z": "61648ed7.6b2b5",
        "g": "d6c8a590b268b5ca",
        "name": "",
        "group": "af41c59d.611af8",
        "order": 1,
        "width": "20",
        "height": "6",
        "label": "HAT Pressure",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "900",
        "ymax": "1100",
        "removeOlder": "90",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 520,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "d274dc16.c88d8",
        "type": "ui_text",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "group": "16b26fd6.25c22",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Software Version Information",
        "label": "Software",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1220,
        "y": 380,
        "wires": []
    },
    {
        "id": "64d0e864.286e08",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "SW Information In",
        "links": [
            "12c2ea86.d98775"
        ],
        "x": 995,
        "y": 380,
        "wires": [
            [
                "d274dc16.c88d8"
            ]
        ]
    },
    {
        "id": "8463c0ca.2f3ab",
        "type": "ui_text",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "group": "16b26fd6.25c22",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Hardware Version Information",
        "label": "Hardware",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1230,
        "y": 420,
        "wires": []
    },
    {
        "id": "5be4c423.91ba4c",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "109b099115b3c4d0",
        "name": "HW Information In",
        "links": [
            "14daccb9.8c9ec3"
        ],
        "x": 995,
        "y": 420,
        "wires": [
            [
                "8463c0ca.2f3ab"
            ]
        ]
    },
    {
        "id": "31adf671.4e490a",
        "type": "ui_template",
        "z": "61648ed7.6b2b5",
        "g": "08b8b87636998369",
        "group": "256c4300.e3f7fc",
        "name": "Toolbar",
        "order": 6,
        "width": "0",
        "height": "0",
        "format": "<script id=\"titleScript\" type=\"text/javascript\">\n    $('#titlewords').remove();\n    var toolbar = $('#nr-dashboard-toolbar');\n    //var div = $('<div style=\"text-align:left; padding-left:10px; width:100%;\"/>');\n    var div = $('<div style=\"position: absolute; right: 20px; top: 5px; height: 30px;\"/>');\n    var p = $('<p/ id=\"titlewords\">');\n    \n    $('#titleScript').parent().hide();\n    div.append(p);\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n\n    // Watch the payload and update the title\n    (function(scope) {\n        scope.$watch('msg.payload', function(data) {\n            displayTitle(data);\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1200,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "208c4960.254676",
        "type": "ui_template",
        "z": "61648ed7.6b2b5",
        "g": "08b8b87636998369",
        "group": "cbb5541c.e417c8",
        "name": "Toolbar",
        "order": 6,
        "width": "0",
        "height": "0",
        "format": "<script id=\"titleScript\" type=\"text/javascript\">\n    $('#titlewords').remove();\n    var toolbar = $('#nr-dashboard-toolbar');\n    //var div = $('<div style=\"text-align:left; padding-left:10px; width:100%;\"/>');\n    var div = $('<div style=\"position: absolute; right: 20px; top: 5px; height: 30px;\"/>');\n    var p = $('<p/ id=\"titlewords\">');\n    \n    $('#titleScript').parent().hide();\n    div.append(p);\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n\n    // Watch the payload and update the title\n    (function(scope) {\n        scope.$watch('msg.payload', function(data) {\n            displayTitle(data);\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1200,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9aaf1603.7370d8",
        "type": "link in",
        "z": "61648ed7.6b2b5",
        "g": "08b8b87636998369",
        "name": "Header Info",
        "links": [
            "5b723801.664c68"
        ],
        "x": 895,
        "y": 120,
        "wires": [
            [
                "31adf671.4e490a",
                "208c4960.254676"
            ]
        ]
    }
]