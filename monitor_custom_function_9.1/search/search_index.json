{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Maximo Monitor 9.1 Custom Function lab Info This Maximo Monitor lab demonstrates how to package, register and apply custom function. In this lab you will write custom function and registerd it with Maximo monitor. You will learn the steps needed to successfully create a custom function, MultiplyByFactor , which multiplies an input item by a factor. You'll define input/output items, implement the function, test it locally using execute_local_test, register it with Maximo Monitor, and apply it to a robot device type. The tutorial uses PyCharm, but other IDEs with Python 3.11.x support are also acceptable. A custom function starter package is available separately. The exercises will cover: Write a custom function using the IoT Functions framework Package and store your function in a GitHub repository Test your function locally before registration Register your function with Maximo Monitor Apply your custom function to a device type Note Expected time needed to run the complete lab: 1 hour Updated: 2025-07-06","title":"Welcome"},{"location":"#welcome-to-the-maximo-monitor-91-custom-function-lab","text":"Info This Maximo Monitor lab demonstrates how to package, register and apply custom function. In this lab you will write custom function and registerd it with Maximo monitor. You will learn the steps needed to successfully create a custom function, MultiplyByFactor , which multiplies an input item by a factor. You'll define input/output items, implement the function, test it locally using execute_local_test, register it with Maximo Monitor, and apply it to a robot device type. The tutorial uses PyCharm, but other IDEs with Python 3.11.x support are also acceptable. A custom function starter package is available separately. The exercises will cover: Write a custom function using the IoT Functions framework Package and store your function in a GitHub repository Test your function locally before registration Register your function with Maximo Monitor Apply your custom function to a device type Note Expected time needed to run the complete lab: 1 hour Updated: 2025-07-06","title":"Welcome to the Maximo Monitor 9.1 Custom Function lab"},{"location":"apply_custom_function/","text":"Objectives In this Exercise you will apply created custom function MultiplyByFactor to the device type. Create a sample device type In Maximo Monitor, navigate to side nav bar Setup > Device Types Click the plus (+) icon to add a new device type Select the Robot sample type template Assign a descriptive name to the device type Click Create Select your new device type and click Set up device type Navigate to the Data tab Note Metrics can take up to 5 minutes to generate data. Apply the custom function to the device type. If you have not created a distance metric, add it. Follow the steps in Tutorial: Adding expressions Navigate to the Calculated Metric tab, click Create calculated metric Select your MultiplyByFactor{YourInitials} function from the catalog Set the appropriate scope and click Next Configure the function parameters: Factor field: Enter 2 Input_item field: Select distance Click Next. Rename the output to 'adjusted_distance'. Click Create. In the data item list, select adjusted_distance. Wait up to 5 minutes for Maximo Monitor to evaluate the custom function against the sample data. Congratulations you have successfully applied your custom function.","title":"4. Apply Custom Function"},{"location":"apply_custom_function/#objectives","text":"In this Exercise you will apply created custom function MultiplyByFactor to the device type.","title":"Objectives"},{"location":"apply_custom_function/#create-a-sample-device-type","text":"In Maximo Monitor, navigate to side nav bar Setup > Device Types Click the plus (+) icon to add a new device type Select the Robot sample type template Assign a descriptive name to the device type Click Create Select your new device type and click Set up device type Navigate to the Data tab Note Metrics can take up to 5 minutes to generate data.","title":"Create a sample device type"},{"location":"apply_custom_function/#apply-the-custom-function-to-the-device-type","text":"If you have not created a distance metric, add it. Follow the steps in Tutorial: Adding expressions Navigate to the Calculated Metric tab, click Create calculated metric Select your MultiplyByFactor{YourInitials} function from the catalog Set the appropriate scope and click Next Configure the function parameters: Factor field: Enter 2 Input_item field: Select distance Click Next. Rename the output to 'adjusted_distance'. Click Create. In the data item list, select adjusted_distance. Wait up to 5 minutes for Maximo Monitor to evaluate the custom function against the sample data. Congratulations you have successfully applied your custom function.","title":"Apply the custom function to the device type."},{"location":"prereqs/","text":"Pre-Requisite Instructions Here are the pre-requisites for this Maximo hands-on lab. Attention This lab requires Maximo Monitor 9.1 or later. MAS application entitlement must be Limited or higher. All Exercises All Exercises require that you have: A computer with a Chrome, Firefox or Safari browser and internet connectivity. User access to a Maximo Application Suite environment that can create a device type in Monitor. This require: o Your user must have access to Maximo Monitor o Your user must have administrator access to Maximo Application Suite. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment.","title":"Pre-Requisites"},{"location":"prereqs/#pre-requisite-instructions","text":"Here are the pre-requisites for this Maximo hands-on lab. Attention This lab requires Maximo Monitor 9.1 or later. MAS application entitlement must be Limited or higher.","title":"Pre-Requisite Instructions"},{"location":"prereqs/#all-exercises","text":"All Exercises require that you have: A computer with a Chrome, Firefox or Safari browser and internet connectivity. User access to a Maximo Application Suite environment that can create a device type in Monitor. This require: o Your user must have access to Maximo Monitor o Your user must have administrator access to Maximo Application Suite. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment.","title":"All Exercises"},{"location":"register_custom_function/","text":"Objectives In this Exercise you will learn how to register custom function with Maximo Monitor. Install the custom function locally Install the custom function in your local environment. Update the variables in {} to match your environment. pip3 install git+https://{XXXXXX}@github.com/{user_id}{path_to_repository}@starter_package --upgrade Replace {xxxxxx} with your personal access token. Test your custom function locally Create a script called test_my_custom_function.py in the scripts folder. In the script, import Python libraries and packages: import datetime as dt import json import pandas as pd import numpy as np from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, func from iotfunctions.base import BaseTransformer from iotfunctions.metadata import EntityType from iotfunctions.db import Database from iotfunctions import ui Connect to Maximo Monitor. In the test_my_custom_function.py script, add: with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) Import and instantiate the function. In the test_my_custom_function.py script, add the following code. Update the variables in {} to match your environment. from custom{yourinitials}.multiplybyfactor{yourinitials} import MultiplyByFactor{YourInitials} fn = MultiplyByFactor{YourInitials}( input_items = ['speed', 'travel_time'], factor = '2', output_items = ['adjusted_speed', 'adjusted_travel_time'] ) df = fn.execute_local_test(db=db, db_schema=db_schema, generate_days=1,to_csv=True) print(df) Run the script from the command line. The date frame results are saved to a .csv file. Look for df_test_entity_for_multiplybyfactor{your_initials}.csv in the scripts directory. Enter: python3 test_my_custom_function.py Register your custom function Create a script called register_my_custom_function.py in the scripts folder. In the script, import Python libraries and packages: import datetime as dt import json import pandas as pd import numpy as np from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, func from iotfunctions.base import BaseTransformer from iotfunctions.metadata import EntityType from iotfunctions.db import Database from iotfunctions import ui Connect to Maximo Monitor. In the register_my_custom_function.py script, add: with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) In the register_my_custom_function.py script, to register the function, add the following code. Update the variables in {} to match your environment. from custom{yourinitials}.multiplybyfactor{yourinitials} import MultiplyByFactor{YourInitials} db.register_functions([MultiplyByFactor{YourInitials}]) Run the script from the command line. For example: python3 register_my_custom_function.py Congratulations you have successfully registerd a custom function with maximo monitor","title":"3. Register Custom Function"},{"location":"register_custom_function/#objectives","text":"In this Exercise you will learn how to register custom function with Maximo Monitor.","title":"Objectives"},{"location":"register_custom_function/#install-the-custom-function-locally","text":"Install the custom function in your local environment. Update the variables in {} to match your environment. pip3 install git+https://{XXXXXX}@github.com/{user_id}{path_to_repository}@starter_package --upgrade Replace {xxxxxx} with your personal access token. Test your custom function locally Create a script called test_my_custom_function.py in the scripts folder. In the script, import Python libraries and packages: import datetime as dt import json import pandas as pd import numpy as np from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, func from iotfunctions.base import BaseTransformer from iotfunctions.metadata import EntityType from iotfunctions.db import Database from iotfunctions import ui Connect to Maximo Monitor. In the test_my_custom_function.py script, add: with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) Import and instantiate the function. In the test_my_custom_function.py script, add the following code. Update the variables in {} to match your environment. from custom{yourinitials}.multiplybyfactor{yourinitials} import MultiplyByFactor{YourInitials} fn = MultiplyByFactor{YourInitials}( input_items = ['speed', 'travel_time'], factor = '2', output_items = ['adjusted_speed', 'adjusted_travel_time'] ) df = fn.execute_local_test(db=db, db_schema=db_schema, generate_days=1,to_csv=True) print(df) Run the script from the command line. The date frame results are saved to a .csv file. Look for df_test_entity_for_multiplybyfactor{your_initials}.csv in the scripts directory. Enter: python3 test_my_custom_function.py","title":"Install the custom function locally"},{"location":"register_custom_function/#register-your-custom-function","text":"Create a script called register_my_custom_function.py in the scripts folder. In the script, import Python libraries and packages: import datetime as dt import json import pandas as pd import numpy as np from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, func from iotfunctions.base import BaseTransformer from iotfunctions.metadata import EntityType from iotfunctions.db import Database from iotfunctions import ui Connect to Maximo Monitor. In the register_my_custom_function.py script, add: with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) In the register_my_custom_function.py script, to register the function, add the following code. Update the variables in {} to match your environment. from custom{yourinitials}.multiplybyfactor{yourinitials} import MultiplyByFactor{YourInitials} db.register_functions([MultiplyByFactor{YourInitials}]) Run the script from the command line. For example: python3 register_my_custom_function.py Congratulations you have successfully registerd a custom function with maximo monitor","title":"Register your custom function"},{"location":"release_notes/","text":"Contributors to this Maximo Lab Author & Developer: Radhika Surani - radhika.surani@ibm.com Change Information Date By Description 2025-07-06 Radhika Surani Lab is ready for the first release.","title":"Release Notes"},{"location":"release_notes/#contributors-to-this-maximo-lab","text":"","title":"Contributors to this Maximo Lab"},{"location":"release_notes/#author-developer","text":"Radhika Surani - radhika.surani@ibm.com","title":"Author &amp; Developer:"},{"location":"release_notes/#change-information","text":"Date By Description 2025-07-06 Radhika Surani Lab is ready for the first release.","title":"Change Information"},{"location":"setup_starter_package/","text":"Objectives In this Exercise you will learn how to: setup starter package with IOT fucntions Prerequisites Before you begin: This Exercise requires that you have: Install Python 3.11.x in your environment. Install Git . Install pip3 package manager for Python. Install an editor such as Pycharm Community Edition Setup Starter Package Clone the HelloWorld starter package . Open a terminal window. Make a new project folder for the starter package. For example, mkdir custom_function. Change to the project directory. For example, cd custom_function. Clone the starter package. Enter: git clone --branch starter_package https://github.com/ibm-watson-iot/functions.git Verify that you cloned the starter package to the custom_function directory. Change to the functions directory in the starter package. Enter: cd functions Open the setup.py file. The setup.py file defines the package name and the list of packages that are required for the project. Set the name parameter to custom{your_initials}. Replace the {your_initials} variable with your initials or with another unique value. In the ibm-watson-iot/functions repository, verify that the iotfunction package is the correct version. For example, for Maximo Monitor 9.1, the package must be from the 9.1.X GitHub branch. Do not replace the x in the version with another value. The following text is an example setup.py file. The name parameter is set to customId and the 9.1.X branch is used. #!/usr/bin/env python from setuptools import setup, find_packages setup(name='customld', version='0.0.1', packages=find_packages(), install_requires=['iotfunctions@git+https://github.com/ibm-watson-iot/functions.git@9.1.x']) Setup Pycharm Install the PyCharm community edition Open PyCharm and select Open to browse to your cloned directory. Next, create a Python virtual environment (venv) inside the custome_function folder by running the following command: python3 -m venv venv-cust cd venv-cust/bin source activate Set up a virtual environment: Go to PyCharm > Preferences > Project > Python Interpreter Click the settings icon and select Add Set your venv folder location Set the base interpreter to your Python 3.11.x directory Run the following command to install the iotfunctions package into your Python environment. Ensure that you use the correct branch name for your version pip3 install git+https://github.com/ibm-watson-iot/functions.git@9.1.x --upgrade Note Always use the IoT Functions version that matches your Maximo Monitor version to avoid pipeline issues. Attention If you're using a Mac Machine, you might encounter compatibility issues with the ibm_db package. Here's how to resolve them: Open the requirements.txt file Change ibm_db==3.2.3 to ibm_db==3.2.5 Save the file pip3 install -r requirements.txt Congratulations you have successfully setup the starter package.","title":"1. Setup Starter Package"},{"location":"setup_starter_package/#objectives","text":"In this Exercise you will learn how to: setup starter package with IOT fucntions","title":"Objectives"},{"location":"setup_starter_package/#prerequisites","text":"Before you begin: This Exercise requires that you have: Install Python 3.11.x in your environment. Install Git . Install pip3 package manager for Python. Install an editor such as Pycharm Community Edition","title":"Prerequisites"},{"location":"setup_starter_package/#setup-starter-package","text":"Clone the HelloWorld starter package . Open a terminal window. Make a new project folder for the starter package. For example, mkdir custom_function. Change to the project directory. For example, cd custom_function. Clone the starter package. Enter: git clone --branch starter_package https://github.com/ibm-watson-iot/functions.git Verify that you cloned the starter package to the custom_function directory. Change to the functions directory in the starter package. Enter: cd functions Open the setup.py file. The setup.py file defines the package name and the list of packages that are required for the project. Set the name parameter to custom{your_initials}. Replace the {your_initials} variable with your initials or with another unique value. In the ibm-watson-iot/functions repository, verify that the iotfunction package is the correct version. For example, for Maximo Monitor 9.1, the package must be from the 9.1.X GitHub branch. Do not replace the x in the version with another value. The following text is an example setup.py file. The name parameter is set to customId and the 9.1.X branch is used. #!/usr/bin/env python from setuptools import setup, find_packages setup(name='customld', version='0.0.1', packages=find_packages(), install_requires=['iotfunctions@git+https://github.com/ibm-watson-iot/functions.git@9.1.x'])","title":"Setup Starter Package"},{"location":"setup_starter_package/#setup-pycharm","text":"Install the PyCharm community edition Open PyCharm and select Open to browse to your cloned directory. Next, create a Python virtual environment (venv) inside the custome_function folder by running the following command: python3 -m venv venv-cust cd venv-cust/bin source activate Set up a virtual environment: Go to PyCharm > Preferences > Project > Python Interpreter Click the settings icon and select Add Set your venv folder location Set the base interpreter to your Python 3.11.x directory Run the following command to install the iotfunctions package into your Python environment. Ensure that you use the correct branch name for your version pip3 install git+https://github.com/ibm-watson-iot/functions.git@9.1.x --upgrade Note Always use the IoT Functions version that matches your Maximo Monitor version to avoid pipeline issues. Attention If you're using a Mac Machine, you might encounter compatibility issues with the ibm_db package. Here's how to resolve them: Open the requirements.txt file Change ibm_db==3.2.3 to ibm_db==3.2.5 Save the file pip3 install -r requirements.txt Congratulations you have successfully setup the starter package.","title":"Setup Pycharm"},{"location":"write_custom_function/","text":"Objectives In this Exercise you will write MultiplyByFactor custom function. Tip you can define your calculation as required! Define your calculation Business scenario: A robotics company is testing new robotic arms and has discovered that testing tools introduce delays affecting speed and travel time measurements. The operations manager needs to adjust these values by a factor of 2 but wants flexibility to change this factor later. Solution approach: Create a reusable MultiplyByFactor function that can: - Accept multiple input items - Apply a configurable multiplication factor - Generate corresponding output items - Be reused across different calculations - Formula: output_value = input_value * factor Package your function and store it in GitHub Create a new private repository on GitHub for the starter package you cloned. Add an empty file (such as README.md) to create the master branch Open the project in PyCharm locally for editing. Verify that the project has the following directory structure and files: functions | |__ setup.py | |__ scripts | |_ local_test_of_function.py | |__ custom | |_ functions.py |_ __init__.py Create your custom function Rename the custom directory to custom{your_initials} (for example, customRS) Create a new file multiplybyfactor{your_initials}.py in your custom{your_initials} directory Add the following code, Update the variables in < > to match your environment. For example, if your code is in GitHub, you might set PACKAGE_URL to 'git+https:// @github.com/github.com/jones/starter@starter_package'. In this function, you implement two methods. You add your calculation to the execute method. You set the inputs and outputs arguments for the function in the build_ui method. import inspect import logging import datetime as dt import math from sqlalchemy.sql.sqltypes import TIMESTAMP,VARCHAR import numpy as np import pandas as pd from iotfunctions.base import BaseTransformer from iotfunctions import ui logger = logging.getLogger(__name__) # Specify the URL to your package here. # This URL must be accessible via pip install. # Example assumes the repository is private. # Replace XXXXXX with your personal access token. # After @ you must specify a branch. PACKAGE_URL = 'git+https://XXXXXX@github.com/ @starter_package' class MultiplyByFactor (BaseTransformer): def __init__(self, input_items, factor, output_items): self.input_items = input_items self.output_items = output_items self.factor = float(factor) super().__init__() def execute(self, df): df = df.copy() for i,input_item in enumerate(self.input_items): df[self.output_items[i]] = df[input_item] * self.factor return df @classmethod def build_ui(cls): #define arguments that behave as function inputs inputs = [] inputs.append(ui.UIMultiItem( name = 'input_items', datatype=float, description = \"Data items adjust\", output_item = 'output_items', is_output_datatype_derived = True) ) inputs.append(ui.UISingle( name = 'factor', datatype=float) ) outputs = [] return (inputs,outputs) Save your credentials to a file Set credentials to connect to Maximo Monitor. Navigate to your starter package directory and locate the credentials_as.json template file Replace the variables with your data and then save the file to your local machine. Note The credentials file is used to run or test the function locally. Do not push this file to your external repository. Push your local changes to your GitHub repository The files that you modified are still pointing to the GitHub repository that you cloned the code from. Change the remote repository to your GitHub repository. Verify that your credentials file is not included with your function code before the commit the changes to your external directory. Push your function code to your external repository in GitHub. Open a terminal window in the project folder Enter: git remote -v. The remote repository is still pointing to https://github.com/ibm-watson-iot/functions Change the remote origin URL by using the following commands: git remote set-url origin URL_To_YOUR_GITHUB_REPOSITORY Confirm that the Fetch and Push URLs are pointing to your repository. Add the upstream remote by using the following command. Enter: git remote add upstream https://github.com/ibm-watson-iot/functions.git Add your files to GIT and commit them. a. In PyCharm, select the custom directory. b. Select Git > Add. c. Select Git > Commit. d. In the Commit Changes window, click Commit. e. Select Git > Repository > Push. f. Click Push. Verify that your module was pushed to a starter_package branch in your repository. Congratulations you have successfully written custom function.","title":"2. Write Custom Function"},{"location":"write_custom_function/#objectives","text":"In this Exercise you will write MultiplyByFactor custom function. Tip you can define your calculation as required!","title":"Objectives"},{"location":"write_custom_function/#define-your-calculation","text":"Business scenario: A robotics company is testing new robotic arms and has discovered that testing tools introduce delays affecting speed and travel time measurements. The operations manager needs to adjust these values by a factor of 2 but wants flexibility to change this factor later. Solution approach: Create a reusable MultiplyByFactor function that can: - Accept multiple input items - Apply a configurable multiplication factor - Generate corresponding output items - Be reused across different calculations - Formula: output_value = input_value * factor","title":"Define your calculation"},{"location":"write_custom_function/#package-your-function-and-store-it-in-github","text":"Create a new private repository on GitHub for the starter package you cloned. Add an empty file (such as README.md) to create the master branch Open the project in PyCharm locally for editing. Verify that the project has the following directory structure and files: functions | |__ setup.py | |__ scripts | |_ local_test_of_function.py | |__ custom | |_ functions.py |_ __init__.py","title":"Package your function and store it in GitHub"},{"location":"write_custom_function/#create-your-custom-function","text":"Rename the custom directory to custom{your_initials} (for example, customRS) Create a new file multiplybyfactor{your_initials}.py in your custom{your_initials} directory Add the following code, Update the variables in < > to match your environment. For example, if your code is in GitHub, you might set PACKAGE_URL to 'git+https:// @github.com/github.com/jones/starter@starter_package'. In this function, you implement two methods. You add your calculation to the execute method. You set the inputs and outputs arguments for the function in the build_ui method. import inspect import logging import datetime as dt import math from sqlalchemy.sql.sqltypes import TIMESTAMP,VARCHAR import numpy as np import pandas as pd from iotfunctions.base import BaseTransformer from iotfunctions import ui logger = logging.getLogger(__name__) # Specify the URL to your package here. # This URL must be accessible via pip install. # Example assumes the repository is private. # Replace XXXXXX with your personal access token. # After @ you must specify a branch. PACKAGE_URL = 'git+https://XXXXXX@github.com/ @starter_package' class MultiplyByFactor (BaseTransformer): def __init__(self, input_items, factor, output_items): self.input_items = input_items self.output_items = output_items self.factor = float(factor) super().__init__() def execute(self, df): df = df.copy() for i,input_item in enumerate(self.input_items): df[self.output_items[i]] = df[input_item] * self.factor return df @classmethod def build_ui(cls): #define arguments that behave as function inputs inputs = [] inputs.append(ui.UIMultiItem( name = 'input_items', datatype=float, description = \"Data items adjust\", output_item = 'output_items', is_output_datatype_derived = True) ) inputs.append(ui.UISingle( name = 'factor', datatype=float) ) outputs = [] return (inputs,outputs)","title":"Create your custom function"},{"location":"write_custom_function/#save-your-credentials-to-a-file","text":"Set credentials to connect to Maximo Monitor. Navigate to your starter package directory and locate the credentials_as.json template file Replace the variables with your data and then save the file to your local machine. Note The credentials file is used to run or test the function locally. Do not push this file to your external repository.","title":"Save your credentials to a file"},{"location":"write_custom_function/#push-your-local-changes-to-your-github-repository","text":"The files that you modified are still pointing to the GitHub repository that you cloned the code from. Change the remote repository to your GitHub repository. Verify that your credentials file is not included with your function code before the commit the changes to your external directory. Push your function code to your external repository in GitHub. Open a terminal window in the project folder Enter: git remote -v. The remote repository is still pointing to https://github.com/ibm-watson-iot/functions Change the remote origin URL by using the following commands: git remote set-url origin URL_To_YOUR_GITHUB_REPOSITORY Confirm that the Fetch and Push URLs are pointing to your repository. Add the upstream remote by using the following command. Enter: git remote add upstream https://github.com/ibm-watson-iot/functions.git Add your files to GIT and commit them. a. In PyCharm, select the custom directory. b. Select Git > Add. c. Select Git > Commit. d. In the Commit Changes window, click Commit. e. Select Git > Repository > Push. f. Click Push. Verify that your module was pushed to a starter_package branch in your repository. Congratulations you have successfully written custom function.","title":"Push your local changes to your GitHub repository"}]}